name: API Build

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'build/github/**'
      - 'src/**'
      - 'deploy/aws/**' # TODO: Review this as new cloud provider targets are used
      - 'deploy/k8s/aws/**'  # TODO: Review this as new cloud provider targets are used
      - '.github/workflows/ci.yml'
  pull_request:
    branches:
        - master
        - main

env:
  CLOUD_PROVIDER: "aws"
  TaskctlVersion: '1.4.2'
  DOCKER_IMAGE_TAG: "0.0.${{ github.RUN_NUMBER }}"
  DOCKER_IMAGE_NAME: "stacks-api"
  DOCKER_REGISTRY_NAME: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.eu-west-2.amazonaws.com"
  OWNER: "stacks_team"
  REGION: "eu-west-2"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # K8S Configuration
  K8S_RESOURCE_FILE: "deploy/k8s/aws/api-deploy.yml"
  # K8S Additional Deploy-Templater var substitutions
  DOCKER_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.eu-west-2.amazonaws.com" # (duplicates DOCKER_REGISTRY_NAME)
  K8S_APP_ROUTE: "/api/menu"
  # App Config (for both TF and K8S)
  RESOURCE_DEF_NAME: "dotnet-api"
  COMPONENT: "api"
  ROLE: "backend"
  APP_NAME: "yumido-netcore-api"
  DOMAIN: "dev-netcore-api"
  COMPANY: "amido"
  PROJECT: "stacks"
  FUNCTIONAL_TESTS_SRC_DIR: src/tests/Functional
  FUNCTIONAL_TESTS_RUN_DIR: ${{ github.workspace }}/tests
  FUNCTIONAL_TESTS_ARTEFACT_NAME: tests
jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl lint
        env:
          TF_FILE_LOCATION: deploy/aws/app/kube

  build:
    needs: lint
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl build
        env:
          # TF Linting and Validation
          TF_FILE_LOCATION: deploy/aws/app/kube
          # Testing
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: amido
          SONAR_URL: "https://sonarcloud.io"
          SONAR_PROPERTIES: '/d:sonar.cs.opencover.reportsPaths="/app/coverage/*.opencover.xml" /d:sonar.exclusions="**/*Tests" /d:sonar.coverage.exclusions="**/*Tests"'
          PROJECT_NAME: stacks-dotnet
          BUILD_BUILDNUMBER: 0.0.${{env.GITHUB_RUN_NUMBER}}
          # Dotnet Build
          SELF_REPO_SRC: src/api
          # Docker
          DOCKER_CONTAINER_REGISTRY_NAME: ${{ env.DOCKER_REGISTRY_NAME }}
          ECR_REGION: ${{ env.REGION }}
          # AWS ECR Authorisation
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.REGION }}
          # Publish test results
          # TODO: to publish coverage/etc.
          # Publish test artifact
          # TODO: to publish functional tests to run after deploy
      - name: Publish Functional Tests
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FUNCTIONAL_TESTS_ARTEFACT_NAME }}
          path: ${{ env.FUNCTIONAL_TESTS_SRC_DIR }}

  AppInfraDev:
    needs: build
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl infrastructure # TODO: This is tactical, will require refactor of task to take arguments as separate var
        env:
          ENV_NAME: nonprod
          # AWS Environmental Config
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.REGION }}
          # Terraform Backend Configuration
          AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
          AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
          AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
          TF_FILE_LOCATION: deploy/aws/app/kube
          TF_BACKEND_ARGS: region=${{ secrets.AWS_TF_STATE_REGION }},access_key=${{ secrets.AWS_ACCESS_KEY_ID }},secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }},bucket=${{ secrets.AWS_TF_STATE_BUCKET }},key=${{ secrets.AWS_TF_STATE_KEY }},dynamodb_table=${{ secrets.AWS_TF_STATE_DYNAMOTABLE }},encrypt=${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          # Terraform Resource Configuration
          TF_VAR_env:  ${{ env.ENV_NAME }}
          TF_VAR_owner: ${{ env.OWNER }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_region: ${{ env.REGION }}

  DeployDev:
    needs: AppInfraDev
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - name: Install TaskCTL
        uses: ./build/github/templates/install-taskctl
      - name: Download Functional Tests
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.FUNCTIONAL_TESTS_ARTEFACT_NAME }}
          path: ${{ env.FUNCTIONAL_TESTS_RUN_DIR }}
      - name: TaskCTL Deploy
        run: taskctl deploy # TODO: This should be removed when we can set the infrastructure:init, which calls terraform -init <args>
        env:
          ENV_NAME: nonprod
          # AWS Environmental Config
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.REGION }}
          # Terraform Backend Configuration (for outputs)
          AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
          AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
          AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
          TF_FILE_LOCATION: deploy/aws/app/kube
          TF_BACKEND_ARGS: region=${{ secrets.AWS_TF_STATE_REGION }},access_key=${{ secrets.AWS_ACCESS_KEY_ID }},secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }},bucket=${{ secrets.AWS_TF_STATE_BUCKET }},key=${{ secrets.AWS_TF_STATE_KEY }},dynamodb_table=${{ secrets.AWS_TF_STATE_DYNAMOTABLE }},encrypt=${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          # Terraform Resource Configuration
          TF_VAR_env:  nonprod
          TF_VAR_owner: ${{ env.OWNER }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_region: ${{ env.REGION }}
          # K8S Target Configuration
          K8S_CLUSTER_TARGET: "amido-stacks-dev-h0ax6owA"
          K8S_CLUSTER_IDENTIFIER: "eu-west-2"
          NAMESPACE: "nonprod-${{ env.DOMAIN }}"
          # K8S Additional Deploy-Templater temporary var substitutions (should be from TF outputs and per env)
          CLOUDWATCH_LOG_GROUP: “amido-stacks-dev-h0ax6owA-logs”
          CLOUDWATCH_STREAM_PREFIX: "nonprod-${{ env.DOMAIN }}"
          DNS_BASE_DOMAIN: "nonprodaws.amidostacks.com"
          # Functional Test Configuration
          FUNCTIONAL_TESTS_RUN_DIR: /app/tests # Must match RELATIVE path from repo root that artefact is downloaded to.
          BaseUrl: "https://nonprod-dev-netcore-api.nonprodaws.amidostacks.com/api/menu/"

      - name: Publish Manifest File
        uses: actions/upload-artifact@v3
        with:
          name: k8s_manifest
          path: ${{ env.K8S_RESOURCE_FILE }}
