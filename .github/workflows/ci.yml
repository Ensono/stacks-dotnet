name: Run taskctl

# on:
#   push:
#     branches: [master]
#   pull_request:
#     branches: [master]

on: [push]

env:
  TaskctlVersion: '1.4.2'
  docker_image_tag: "${{ github.RUN_NUMBER }}-${{ github.HEAD_REF }}"
  docker_image_name: stacks-api
  owner: "stacks_team"

jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl lint
        env:
          TF_FILE_LOCATION: deploy/aws/app/kube

  build:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl build
        env:
          # AWS
          TF_FILE_LOCATION: deploy/aws/app/kube
          FUNCTIONAL_TESTS_SRC_DIR: src/tests/Functional
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: amido
          SONAR_URL: "https://sonarcloud.io"
          SONAR_PROPERTIES: '/d:sonar.cs.opencover.reportsPaths="/app/coverage/*.opencover.xml" /d:sonar.exclusions="**/*Tests" /d:sonar.coverage.exclusions="**/*Tests"'
          PROJECT_NAME: stacks-dotnet
          BUILD_BUILDNUMBER: 0.0.${{env.GITHUB_RUN_NUMBER}}
          # Dotnet Build
          SELF_REPO_SRC: src/api
          # Docker
          DOCKER_CONTAINER_REGISTRY_NAME: $(docker_container_registry_name_nonprod).azurecr.io
          REGISTRY_RESOURCE_GROUP: $(docker_container_registry_rg_name_nonprod)

          # Publish test results
          # Publish test artifact

  AppInfraDev:
    needs: build
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl infrastructure:aws # TODO: This is tactical, will require some conditions to run infrastructure tasks against different clouds.
        env:
          ENV_NAME: nonprod
          # AWS
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
          AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
          AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
          # Terraform Backend Configuration
          TF_FILE_LOCATION: deploy/aws/app/kube
          # Terraform Resource Configuration
          TF_VAR_env:  ${{ env.env_name }}
          TF_VAR_owner: ${{ env.owner }}
          TF_VAR_docker_image_name: ${{ env.docker_image_name }}

