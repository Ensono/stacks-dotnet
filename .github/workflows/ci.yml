name: Run taskctl

# on:
#   push:
#     branches: [master]
#   pull_request:
#     branches: [master]

on: [push]

env:
  CLOUD_PROVIDER: "aws"
  TaskctlVersion: '1.4.2'
  docker_image_tag: "${{ github.RUN_NUMBER }}-${{ github.HEAD_REF }}"
  docker_image_name: stacks-api
  docker_registry_name: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.region }}.amazonaws.com"
  owner: "stacks_team"
  REGION: "eu-west-2"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # K8S Configuration
  K8S_RESOURCE_FILE: "deploy/k8s/aws/api-deploy.yml"
  # K8S Additional Deploy-Templater var substitutions
  DOCKER_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.region }}.amazonaws.com" # (duplicates docker_registry_name)
  K8S_APP_ROUTE: "/api/menu"
  RESOURCE_DEF_NAME: "dotnet-api"
  COMPONENT: "api"
  ROLE: "backend"
  APP_NAME: "yumido-netcore-api"
  # K8S Additional Deploy-Templater temporary var substitutions (should be from TF outputs and per env)
  CLOUDWATCH_LOG_GROUP: ""
  CLOUDWATCH_STREAM_PREFIX: ""
  DOMAIN: ""
  DNS_BASE_DOMAIN: ""

jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl lint
        env:
          TF_FILE_LOCATION: deploy/aws/app/kube

  build:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl build
        env:
          # AWS
          TF_FILE_LOCATION: deploy/aws/app/kube
          FUNCTIONAL_TESTS_SRC_DIR: src/tests/Functional
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: amido
          SONAR_URL: "https://sonarcloud.io"
          SONAR_PROPERTIES: '/d:sonar.cs.opencover.reportsPaths="/app/coverage/*.opencover.xml" /d:sonar.exclusions="**/*Tests" /d:sonar.coverage.exclusions="**/*Tests"'
          PROJECT_NAME: stacks-dotnet
          BUILD_BUILDNUMBER: 0.0.${{env.GITHUB_RUN_NUMBER}}
          # Dotnet Build
          SELF_REPO_SRC: src/api
          # Docker
          DOCKER_CONTAINER_REGISTRY_NAME: ${{ env.docker_registry_name }}
          ECR_REGION: ${{ env.region }}

          # Publish test results
          # TODO: Not possible in GitHub Actions
          # Publish test artifact

  AppInfraDev:
    needs: build
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl infrastructure:aws # TODO: This is tactical, will require refactor of task to take arguments as separate var
        env:
          ENV_NAME: nonprod
          # AWS Environmental Config
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.region }}
          # Terraform Backend Configuration
          AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
          AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
          AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
          TF_FILE_LOCATION: deploy/aws/app/kube
          # Terraform Resource Configuration
          TF_VAR_env:  ${{ env.env_name }}
          TF_VAR_owner: ${{ env.owner }}
          TF_VAR_docker_image_name: ${{ env.docker_image_name }}
          TF_VAR_region: ${{ env.region }}

  DeployDev:
    needs: AppInfraDev
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v3
      - uses: ./build/github/templates/install-taskctl
      - run: taskctl deploy:kubernetes
        env:
          ENV_NAME: nonprod
          # AWS Environmental Config
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.region }}
          # Terraform Backend Configuration (for outputs)
          AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
          AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
          AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
          AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
          TF_FILE_LOCATION: deploy/aws/app/kube
          # Terraform Resource Configuration
          TF_VAR_env:  ${{ env.env_name }}
          TF_VAR_owner: ${{ env.owner }}
          TF_VAR_docker_image_name: ${{ env.docker_image_name }}
          TF_VAR_region: ${{ env.region }}
