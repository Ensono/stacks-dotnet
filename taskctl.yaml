contexts:
  powershell:
    executable:
      bin: docker
      args:
        - run
        - --rm
        - -v ${PWD}:/app
        - -v /var/run/docker.sock:/var/run/docker.sock
        - -e PSModulePath=/app/build/scripts/modules
        - -w /app
        - --env-file envfile
        - russellseymour/runner-pwsh-dotnet:0.0.3
        - pwsh -NoProfile -Command

    quote: "'"
    env:
      arguments: "-v q /p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
    before: env | grep -v PATH > envfile

  powershell-python:
    executable:
      bin: docker
      args:
        - run
        - --rm
        - -v
        - ${PWD}:/app
        - -e
        - PSModulePath=/app/build/scripts/modules
        - -w
        - /app
        - russellseymour/runner-pwsh-python:0.0.2
        - pwsh
        - -NoProfile
        - -Command


tasks:

  rjs:
    context: powershell
    command: Write-Host {{ .DOCKER_IMAGE_NAME }}
    variables:
      DOCKER_IMAGE_NAME: stacks-api

  buildnumber:
    context: powershell
    description: Update the build number
    command:
      - Update-BuildNumber -BuildNumber $BUILDNUMBER
    env:
      BUILDNUMBER: $DOCKER_IMAGE_TAG

  deps:
    context: powershell
    description: Get the necessary dependencies
    command:
      - Invoke-GitClone -repo amido/stacks-pipeline-templates -ref refs/tags/v2.0.6 -path support

  lint:yaml:
    context: powershell-python
    description: Perform YAML linting
    command:
      - Invoke-YamlLint

  lint:terraform:format:
    context: powershell
    description: Perform Terraform format check
    command:
      - Invoke-Terraform -Format -Path deploy/azure/app/kube

  lint:terraform:validate:
    context: powershell
    description: Perform Terraform validation
    command:
      - Invoke-Terraform -Validate -Path deploy/azure/app/kube

  # TESTS
  # Configure test tasks
  test:sonarcloud:start:
    context: powershell
    description: Run SonarCloud tests
    command:
      - Invoke-SonarScanner -start -buildversion $BUILD_BUILDNUMBER
      - Invoke-DotNet -Build
    condition: exit $SONAR_NO_RUN

  # Stop the static code analyise
  # TODO - need to work out why the coverage files are being modified in the original build
  test:sonarcloud:stop:
    context: powershell
    description: Run SonarCloud tests
    command:
      - Invoke-SonarScanner -stop
    condition: exit $SONAR_NO_RUN

  test:unittest:
    context: powershell
    description: Perform unit tests
    command:
      - Invoke-DotNet -Tests -pattern "*UnitTests"
    condition: exit $UNITTEST_NO_RUN

  test:component:
    context: powershell
    description: Perform component tests
    command:
      - Invoke-DotNet -Tests -pattern "*ComponentTests"
    condition: exit $COMPONENTTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  test:integration:
    context: powershell
    description: Perform Integration tests
    command:
      - Invoke-DotNet -Tests -pattern "*IntegrationTests"
    condition: exit $INTEGRATIONTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  test:contract:
    context: powershell
    description: Perform contract tests
    command:
      - Invoke-DotNet -Tests -pattern "*ContractTests"
    condition: exit $CONTRACTTEST_NO_RUN

  test:coverage:
    context: powershell
    description: Generate test coverage reports
    command:
      - Invoke-DotNet -Coverage -target /app/coverage

  # Compilation tasks
  build:container:
    context: powershell
    description: Create container image for application
    command:
      - Build-DockerImage -Name {{ .IMAGE_NAME }} -buildargs src/api -push
    variables:
      IMAGE_NAME: stacks-api

  build:functional_tests:
    context: powershell
    description: Build functional tests for integration testing
    command:
      - Invoke-Dotnet -Build -Path src/tests/Functional

  # Infrastructure tasks
  infra:init:
    context: powershell
    description: Initialise Terraform for the environment
    dir: deploy/azure/app/kube
    command:
      - Invoke-Terraform -Init `
            -backend key=$env:TF_STATE_KEY,`
                     storage_account_name=$env:TF_STATE_STORAGE,`
                     resource_group_name=$env:TF_STATE_RG,`
                     container_name=$env:TF_STATE_CONTAINER,`
                     subscription_id=$env:ARM_SUBSCRIPTION_ID,`
                     tenant_id=$env:ARM_TENANT_ID,`
                     client_id=$env:ARM_CLIENT_ID,`
                     client_secret=$env:ARM_CLIENT_SECRET
      - Invoke-Terraform -Workspace -Arguments $env:ENV_NAME

  infra:plan:
    context: powershell
    description: Plan Terraform
    command:
      - Invoke-Terraform -Plan -Arguments "-input=false","-out=tfplan"

  infra:apply:
    context: powershell
    description: Apply Terraform Plan
    command:
      - Invoke-Terraform -Apply -PlanFile tfplan

  infra:output:
    context: powershell
    description: Get Terraform Outputs
    command:
      - Invoke-Terraform -Output

  # Deployment
  deploy:templater:
    context: powershell
    description: Render deployment templates
    before:
      - |
        echo @"
          @(
            @{
              displayName = "AppDeployment"
              template = "deploy/k8s/app/base_api-deploy.yml"
              vars = @{
                dns_pointer = "`${ENV_NAME}-`${DOMAIN}.`${BASE_DOMAIN}"
                tls_domain = "`${BASE_DOMAIN}"
                ks8_app_path = "/api/menu"
                log_level = "Debug"
                k8s_image = "`${DOCKER_REGISTRY}/`${DOCKER_IMAGE_NAME}:`${DOCKER_IMAGE_TAG}"
                aadpodidentitybinding = "stacks-webapp-identity"
                app_insights_key = "`${APP_INSIGHTS_INSTRUMENTATION_KEY}"
                jwtbearerauthentication_audience = "<TODO>"
                jwtbearerauthentication_authority = "<TODO>"
                jwtbearerauthentication_enabled = false
                jwtbearerauthentication_openapiauthorizationurl = "<TODO>"
                jwtbearerauthentication_openapiclientid = "<TODO>"
                jwtbearerauthentication_openapitokenurl = "<TODO>"
              }
            }
          )
        "@ > local/list.txt
    command:
      - Invoke-Templater -Path local/list.txt -TfOutputs '{{ .Tasks.infra:output.Output }}'

  deploy:kubernetes:
    context: powershell
    description: Deploy to Kubernetes
    command:
      - Invoke-Kubectl -Apply -Arguments $env:KUBECTL_FILE_PATH
      - Invoke-Kubectl -Rollout -Arguments "-n $env:NAMESPACE deploy/$env:RESOURCE_DEF_NAME --timeout $env:DEPLOYMENT_STATUS_TIMEOUT"

  deploy:functional_tests:
    context: powershell
    description: Run Functional Tests
    command:
      - Invoke-Dotnet -Tests -pattern "*" -path $env:FUNCTIONAL_TESTS_DIR

watchers:

  lint:
    watch:
      - "*.yml"
    events: [create, write]
    task: lint:yaml

pipelines:

  lint:
    - task: lint:yaml
    - task: lint:terraform:format
    - task: lint:terraform:validate

  # Pipeline to perform the build of the project
  build:
    - pipeline: lint
    - task: buildnumber
    - task: test:sonarcloud:start
    - task: test:unittest
    - task: test:component
    - task: test:integration
    - task: test:contract
    - task: test:coverage
      depends_on:
        - test:unittest
    - task: test:sonarcloud:stop
      depends_on:
        - test:unittest
        - test:component
        - test:integration
        - test:contract
    - task: build:functional_tests
    - task: build:container
      depends_on: test:sonarcloud:stop
      variables:
        IMAGE_NAME: stacks-api

  # Pipeline to ensure that the infrastructure is valid
  infrastructure:
    - task: infra:init
    - task: infra:plan
      depends_on: infra:init
    - task: infra:apply
      depends_on: infra:plan
    - task: infra:output
      depends_on: infra:apply

  # Deploy pipeline
  deploy:
    - task: infra:output
    - task: deploy:templater
      depends_on: infra:output
    - task: deploy:kubernetes
      depends_on: deploy:templater
