apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    {{- include "stacks-dotnet.annotations" . | nindent 8 }}
  labels:
    {{- include "stacks-dotnet.labels" . | nindent 4 }}
  name: {{ include "stacks-dotnet.fullname" . }}
  namespace: {{ .Values.namespace }}
data:
  appsettings.json: |
    {
      "Serilog": {
          "Using": [
              "Serilog.Sinks.Console",
              "Serilog.Sinks.ApplicationInsights"
          ],
          "MinimumLevel": {
              "Default": "{{ .Values.pod.loglevel }}",
              "Override": {}
          },
          "WriteTo": [
              { "Name": "Console" },
              {{- if eq .Values.cloudProvider "azure" }}
              {
                  "Name": "ApplicationInsights",
                  "Args": {
                      "telemetryConverter": "Serilog.Sinks.ApplicationInsights.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights"
                  }
              }
              {{- end }}
          ],
          "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId" ],
          "Destructure": [],
          "Properties": {
              "Application": "Menu API"
          }
      },
      "AllowedHosts": "*",
      "JwtBearerAuthentication": {
          "Audience": "${jwtbearerauthentication_audience}",
          "Authority": "${jwtbearerauthentication_authority}",
          "Enabled": false,
          "OpenApi": {
              "AuthorizationUrl": "${jwtbearerauthentication_openapiauthorizationurl}",
              "ClientId": "${jwtbearerauthentication_openapiclientid}",
              "TokenUrl": "${jwtbearerauthentication_openapitokenurl}"
          }
      },
      {{- if eq .Values.cloudProvider "azure" }}
      {{- if and .Values.app.sbTopic .Values.app.sbConnectionstring }}
      "ServiceBusConfiguration": {
        {{- if eq .Values.app.sbType "sender" }}
        "Sender": {
          "Topics": [
            {
              "Name": "{{ .Values.app.sbTopic }}",
              "ConnectionStringSecret": {
                "Identifier": "SERVICEBUS_CONNECTIONSTRING",
                "Source": "Environment"
              }
            }
          ]
        }
        {{- end }}
        {{- if eq .Values.app.sbType "listener" }}
        "Listener": {
          "Topics": [
            {
              "Name": "{{ .Values.app.sbTopic }}",
              "SubscriptionName": "{{ .Values.app.sbSubscription }}",
              "ConcurrencyLevel": 5,
              "DisableProcessing": false,
              "ConnectionStringSecret": {
                "Identifier": "SERVICEBUS_CONNECTIONSTRING",
                "Source": "Environment"
              },
              "DisableMessageValidation": true
            }
          ]
        }
        {{- end }}
      },
      {{- end }}
      {{- if and .Values.app.cosmosdbName .Values.app.cosmosdbEndpoint }}
      "CosmosDb": {
        "DatabaseAccountUri": "{{ .Values.app.cosmosdbEndpoint }}",
        "DatabaseName": "{{ .Values.app.cosmosdbName }}",
        "SecurityKeySecret": {
          "Identifier": "COSMOSDB_KEY",
          "Source": "Environment"
        }
      },
      {{- end }}
      {{- end }}
      {{- if eq .Values.cloudProvider "aws" }}
      "AWS": {
        "Region": "{{ .Values.region }}"
      },
      {{- if .Values.app.snsTopicArn }}
      "AwsSnsConfiguration": {
        "TopicArn": {
          "Identifier": "TOPIC_ARN",
          "Source": "Environment"
        }
      },
      {{- end }}
      {{- if .Values.app.dynamodbTableName }}
      "DynamoDb": {
        "TableName": "{{ .Values.app.dynamodbTableName }}",
        "TablePrefix": "{{ .Values.env }}"
      },
      {{- end }}
      {{- end }}
      "TestConfig": "Test value from file",
      "Values": {
        "Items": [
          "Item A from config",
          "Item B from congig",
          "Item C from config"
        ]
      }
    }
