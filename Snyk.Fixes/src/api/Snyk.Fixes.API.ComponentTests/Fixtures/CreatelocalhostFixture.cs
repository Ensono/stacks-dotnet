using System;
using System.Threading.Tasks;
using Amido.Stacks.Application.CQRS.ApplicationEvents;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using NSubstitute;
using Snyk.Fixes.API.Authentication;
using Snyk.Fixes.API.Models.Requests;
using Snyk.Fixes.Application.Integration;
using Snyk.Fixes.CQRS.ApplicationEvents;

namespace Snyk.Fixes.API.ComponentTests.Fixtures
{
    public class CreatelocalhostFixture : ApiClientFixture
    {
        readonly CreatelocalhostRequest newlocalhost;
        IlocalhostRepository repository;
        IApplicationEventPublisher applicationEventPublisher;

        public CreatelocalhostFixture(CreatelocalhostRequest newlocalhost, IOptions<JwtBearerAuthenticationConfiguration> jwtBearerAuthenticationOptions)
            : base(jwtBearerAuthenticationOptions)
        {
            this.newlocalhost = newlocalhost;
        }

        protected override void RegisterDependencies(IServiceCollection collection)
        {
            base.RegisterDependencies(collection);

            // Mocked external dependencies, the setup should 
            // come later according to the scenarios
            repository = Substitute.For<IlocalhostRepository>();
            applicationEventPublisher = Substitute.For<IApplicationEventPublisher>();

            collection.AddTransient(IoC => repository);
            collection.AddTransient(IoC => applicationEventPublisher);
        }


        /****** GIVEN ******************************************************/

        internal void GivenAValidlocalhost()
        {
            // Don't need to do anything here assuming the
            // newlocalhost auto generated by AutoFixture is valid
        }

        internal void GivenAInvalidlocalhost()
        {
            newlocalhost.Name = null;
            newlocalhost.Description = null;
        }


        internal void GivenAlocalhostDoesNotExist()
        {
            repository.GetByIdAsync(id: Arg.Any<Guid>())
                        .Returns((Domain.localhost)null);
        }


        /****** WHEN ******************************************************/

        internal async Task WhenThelocalhostCreationIsSubmitted()
        {
            await Createlocalhost(newlocalhost);
        }

        /****** THEN ******************************************************/

        internal void ThenGetlocalhostByIdIsCalled()
        {
            repository.Received(1).GetByIdAsync(Arg.Any<Guid>());
        }
        internal void ThenThelocalhostIsSubmittedToDatabase()
        {
            repository.Received(1).SaveAsync(Arg.Is<Domain.localhost>(localhost => localhost.Name == newlocalhost.Name));
        }

        internal void ThenThelocalhostIsNotSubmittedToDatabase()
        {
            repository.DidNotReceive().SaveAsync(Arg.Any<Domain.localhost>());
        }

        internal void ThenAlocalhostCreatedEventIsRaised()
        {
            applicationEventPublisher.Received(1).PublishAsync(Arg.Any<localhostCreated>());
        }

        internal void ThenAlocalhostCreatedEventIsNotRaised()
        {
            applicationEventPublisher.DidNotReceive().PublishAsync(Arg.Any<localhostCreated>());
        }
    }
}
