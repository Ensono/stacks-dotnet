name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

variables:
  - template: azuredevops-vars.yml

  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  - name: self_repo_src
    value: src/api
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"

  - name: self_pipeline_repo
    value: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  - name: self_pipeline_scripts_dir
    value: "$(self_pipeline_repo)/scripts"

  # DEFAULT IMAGE RUNNER
  - name: pool_vm_image
    value: ubuntu-20.04

  - name: docker_image_tag
    value: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"

  - name: resource_def_name
    value: dotnet-api

  # Versioning
  - name: version_major
    value: 0
  - name: version_minor
    value: 0
  - name: version_revision
    value: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv

    jobs:
      - job: AppBuild
        container: runner_container
        pool:
          vmImage: $(pool_vm_image)

        variables:
          - group: amido-stacks-webapp
          - name: SONAR_HOST_URL
            value: "https://sonarcloud.io"
          - name: SONAR_PROPERTIES
            value: ""
          - name: REGISTRY_RESOURCE_GROUP
            value: $(kubernetes_clusterrg_nonprod)
          - name: PROJECT_ROOT_DIR
            value: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)

        steps:

          - checkout: self

          - task: Bash@3
            inputs:
              targetType: inline
              script: taskctl build
            env:
              ARM_TENANT_ID: "$(azure-tenant-id)"
              ARM_SUBSCRIPTION_ID: "$(azure-subscription-id)"
              ARM_CLIENT_ID: "$(azure-client-id)"
              ARM_CLIENT_SECRET: "$(azure-client-secret)"

          # Upload test coverage results as artifacts
          - task: PublishCodeCoverageResults@1
            displayName: Upload coverage results
            inputs:
              summaryFileLocation: $(PROJECT_ROOT_DIR)/coverage/Cobertura.xml
              codecoverageTool: cobertura
              pathToSources: $(PROJECT_ROOT_DIR)

          # Upload functional tests as artifacts
          - task: PublishPipelineArtifact@1
            displayName: Upload functional tests
            inputs:
              path: $(Build.SourcesDirectory)/src/tests/Functional
              artifact: tests

  - stage: Dev
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: dev

    jobs:
      - deployment: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-dev

        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: self

                - task: Bash@3
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    ENV_NAME: $(Environment.ShortName)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TS_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)

                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: true
                    TF_VAR_app_insights_name: $(tf_app_insights_name_nonprod)
                    TF_VAR_app_gateway_frontend_ip_name: $(tf_app_gateway_frontend_ip_name_nonprod)
                    TF_VAR_core_resource_group: $(tf_core_resource_group_nonprod)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: false
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_dns_zone_name: $(base_domain_nonprod)
                    TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)"
                    TF_VAR_internal_dns_zone_name: $(base_domain_internal_nonprod)
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"

      - deployment: DeployDev
        dependsOn: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: PublishPipelineArtifact@1
                  displayName: Publish Kubernetes Manifest
                  inputs:
                    path: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_dev

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  inputs:
                    artifact: tests
                    path: $(Pipeline.Workspace)/tests

                - task: Bash@3
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    BASE_DOMAIN: ${{ variables.base_domain_nonprod }}
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(k8s_docker_registry_nonprod)
                    DOMAIN: ${{ variables.domain }}
                    ENV_NAME: $(Environment.ShortName)
                    KUBECTL_FILEPATH: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    FUNCTIONAL_TESTS_DIR: $(Pipeline.Workspace)/tests
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    BaseUrl: "https://$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_nonprod)/api/menu/"

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod
      - group: stacks-credentials-prod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: prod

    jobs:
      - deployment: AppInfraProd
        container: runner_continer
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-prod

        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: self

                - task: PowerShell@2
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    ENV_NAME: $(Environment.ShortName)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TS_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)

                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: true
                    TF_VAR_app_insights_name: $(tf_app_insights_name_nonprod)
                    TF_VAR_app_gateway_frontend_ip_name: $(tf_app_gateway_frontend_ip_name_prod)
                    TF_VAR_core_resource_group: $(tf_core_resource_group_prod)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: false
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_dns_zone_name: $(base_domain_nonprod)
                    TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)"
                    TF_VAR_internal_dns_zone_name: $(base_domain_internal_prod)
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
        container: runner_container
        pool:
          vmImage: $(pool_vm_image)
        environment: prod
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: PublishPipelineArtifact@1
                  displayName: Publish Kubernetes Manifest
                  inputs:
                    path: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_dev

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  inputs:
                    artifact: tests
                    path: $(Pipeline.Workspace)/tests

                - task: PowerShell@2
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    BASE_DOMAIN: ${{ variables.base_domain_prod }}
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(k8s_docker_registry_prod)
                    DOMAIN: ${{ variables.domain }}
                    ENV_NAME: $(Environment.ShortName)
                    KUBECTL_FILEPATH: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    FUNCTIONAL_TESTS_DIR: $(Pipeline.Workspace)/tests
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    BaseUrl: "https://$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_prod)/api/menu/"
