name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

variables:
  - template: azuredevops-runner-vars.yml

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp  # Primarily for SonarQube credentials

    jobs:
      - job: AppBuild
        pool:
          vmImage: $(pool_vm_image)

        variables:
          - group: amido-stacks-webapp
          - name: PROJECT_ROOT_DIR
            value: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)

        steps:

          - checkout: self

          # Install Taskctl so that the tests can be run
          - task: Bash@3
            displayName: "Install: Taskctl"
            inputs:
              targetType: inline
              script: |
                wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_revision)
              # TODO: Testing if this works with DOCKER_IMAGE_TAG instead of BUILD_BUILDNUMBER

          - task: Bash@3
            displayName: "TaskCTL: Build"
            inputs:
              targetType: inline
              script: taskctl build
            env:
              # Azure
              ARM_TENANT_ID: "$(azure-tenant-id)"
              ARM_SUBSCRIPTION_ID: "$(azure-subscription-id)"
              ARM_CLIENT_ID: "$(azure-client-id)"
              ARM_CLIENT_SECRET: "$(azure-client-secret)"
              # SonarQube
              SONAR_ORG: $(SONAR_ORGANIZATION)
              SONAR_URL: "https://sonarcloud.io"
              SONAR_TOKEN: $(SONAR_TOKEN)
              SONAR_PROPERTIES: ""
              PROJECT_NAME: $(SONAR_PROJECT_NAME)
              BUILD_BUILDNUMBER: $(version_revision)
              # Docker
              DOCKER_CONTAINER_REGISTRY_NAME: $(docker_container_registry_name_nonprod).azurecr.io
              REGISTRY_RESOURCE_GROUP: $(docker_container_registry_rg_name_nonprod)
          # Upload test coverage results as artifacts
          - task: PublishCodeCoverageResults@1
            displayName: Upload coverage results
            inputs:
              summaryFileLocation: $(PROJECT_ROOT_DIR)/coverage/Cobertura.xml
              codecoverageTool: cobertura
              pathToSources: $(PROJECT_ROOT_DIR)

          # Upload functional tests as artifacts
          - task: PublishPipelineArtifact@1
            displayName: Upload functional tests
            inputs:
              path: $(Build.SourcesDirectory)/src/tests/Functional
              artifact: tests

  - stage: Dev
    dependsOn: Build
    # condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master')),eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: dev

    jobs:
      - deployment: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-dev

        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: self

                # Install Taskfile so that the tests can be run
                - task: Bash@3
                  displayName: "Install: Taskctl"
                  inputs:
                    targetType: inline
                    script: |
                      wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                      tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    # Terraform Backend Configuration
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TS_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    # Deployment Specific Configuration
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: true
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: false
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"

      - deployment: DeployDev
        dependsOn: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # Install Taskfile so that the tests can be run
                - task: Bash@3
                  displayName: Install Taskctl
                  inputs:
                    targetType: inline
                    script: |
                      wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                      tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  inputs:
                    artifact: tests
                    path: $(Pipeline.Workspace)/tests

                - task: Bash@3
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    # Azure Authentication
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TS_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    # Deployment Specific Configuration  (used for Terraform Outputs)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: true
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: false
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    # Docker Image Information
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(docker_container_registry_name_nonprod)
                    # Configuration
                    ENV_NAME: $(Environment.ShortName)
                    DOMAIN: ${{ variables.domain }}
                    FUNCTIONAL_TESTS_DIR: $(Pipeline.Workspace)/tests
                    # Invoke-KubeCTL control variables
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    # Check base_ prefixed file at $(KUBECTL_FILEPATH) to see what should be replaced.
                    # The file deployment_list.ps1 can contain custom mappings, otherwise
                    # all other ${var} syntax entries will be replaced with like named env vars
                    K8S_CLUSTER_TARGET: amido-stacks-nonprod-euw-core
                    K8S_CLUSTER_IDENTIFIER: amido-stacks-nonprod-euw-core
                    K8S_RESOURCE_FILEPATH: $(Agent.BuildDirectory)/s/deploy/k8s/app/api-deploy.yml
                    
                - task: PublishPipelineArtifact@1
                  displayName: Publish Kubernetes Manifest
                  inputs:
                    path: $(Agent.BuildDirectory)/s/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_dev
  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod
      - group: stacks-credentials-prod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: prod

    jobs:
      - deployment: AppInfraProd
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-prod

        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: self

                # Install Taskfile so that the tests can be run
                - task: Bash@3
                  displayName: Install Taskctl
                  inputs:
                    targetType: inline
                    script: |
                      wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                      tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

                - task: PowerShell@2
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    # Terraform Backend Configuration
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TS_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    # Deployment Specific Configuration
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: true
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: false
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
        pool:
          vmImage: $(pool_vm_image)
        environment: prod
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # Install Taskfile so that the tests can be run
                - task: Bash@3
                  displayName: Install Taskctl
                  inputs:
                    targetType: inline
                    script: |
                      wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                      tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

                - task: PublishPipelineArtifact@1
                  displayName: Publish Kubernetes Manifest
                  inputs:
                    path: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_dev

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  inputs:
                    artifact: tests
                    path: $(Pipeline.Workspace)/tests

                - task: PowerShell@2
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    BASE_DOMAIN: ${{ variables.base_domain_prod }}
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(docker_container_registry_name_prod)
                    DOMAIN: ${{ variables.domain }}
                    ENV_NAME: $(Environment.ShortName)
                    KUBECTL_FILEPATH: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    FUNCTIONAL_TESTS_DIR: $(Pipeline.Workspace)/tests
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    BaseUrl: "https://$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_prod)/api/menu/"
