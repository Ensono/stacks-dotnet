name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

resources:
  containers:
    - container: runner_container
      image: russellseymour/runner-pwsh-dotnet

variables:
  - template: azuredevops-vars.yml

  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  - name: self_repo_src
    value: src/api
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"

  - name: self_pipeline_repo
    value: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  - name: self_pipeline_scripts_dir
    value: "$(self_pipeline_repo)/scripts"

  # DEFAULT IMAGE RUNNER
  - name: pool_vm_image
    value: ubuntu-20.04

  - name: docker_image_name
    value: $(self_generic_name)
  - name: docker_image_tag
    value: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"

  # Versioning
  - name: version_major
    value: 0
  - name: version_minor
    value: 0
  - name: version_revision
    value: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv

    jobs:
      - job: AppBuild
        container: runner_container
        pool:
          vmImage: $(pool_vm_image)

        variables:
          - group: amido-stacks-webapp
          - name: SONAR_HOST_URL
            value: "https://sonarcloud.io"
          - name: SONAR_PROPERTIES
            value: ""
          - name: REGISTRY_RESOURCE_GROUP
            value: $(kubernetes_clusterrg_nonprod)
          - name: PROJECT_ROOT_DIR
            value: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)

        steps:

          - checkout: self

          - task: PowerShell@2
            inputs:
              targetType: inline
              script: taskctl build
            env:
              AZURE_TENANT_ID: "$(azure-tenant-id)"
              AZURE_SUBSCRIPTION_ID: "$(azure-subscription-id)"
              AZURE_CLIENT_ID: "$(azure-client-id)"
              AZURE_CLIENT_SECRET: "$(azure-client-secret)"

          # Upload test coverage results as artifacts
          - task: PublishCodeCoverageResults@1
            displayName: Upload coverage results
            inputs:
              summaryFileLocation: $(PROJECT_ROOT_DIR)/coverage/Cobertura.xml
              codecoverageTool: cobertura
              pathToSources: $(PROJECT_ROOT_DIR)

          # Upload functional tests as artifacts
          - task: PublishPipelineArtifact@1
            displayName: Upload functional tests
            inputs:
              path: $(Build.SourcesDirectory)/$(self_repo)/src/tests/Functional
              artifact: tests


