name: $(build.SourceBranchName)-init

trigger:
  paths:
    include:
    - deploy/terraform/*
    - build/azDevOps/azure/resources-provisioning.yml
    exclude:
    - deploy/*
    - src/*
    - contracts/*
    - build/*

resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    endpoint: amidostacks # Created when you set up the connection to GitHub from Azure DevOps

variables:
# Versioning
- name: Version.Major
  value: 1
- name: Version.Minor
  value: 1
- name: Version.MajorMinor
  value: $(Version.Major).$(Version.Minor)
- name: Version.Revision
  value: $[counter(variables['Version.Minor'], 0)]
- name: Version.Tag
  value: $(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)

# DevOps Scripts Package Info
- name: DevOps.File
  value: scripts-1.2.8-master.tar.gz
- name: DevOps.Container
  value: packages
- name: DevOps.storageAccount
  value: amidostacksuksprod
- name: DevOps.RG
  value: amido-stacks-rg-uks-prod

# Global Variables:
- name: Global.company
  value: amido
- name: Global.project
  value: stacks
- name: Global.domain
  value: menu

## Global Azure Specific Config
- name: Azure.location
  value: uksouth
- name: Azure.tags
  value: "{}"

# Resource Terraform State Backend:
- name: Terraform.stateRG
  value: amido-stacks-rg-uks
- name: Terraform.stateStorageAccount
  value: $(Global.company)$(Global.project)tfstategbl
- name: Terraform.stateStorageContainer
  value: tfstate
- name: Terraform.stateKey
  value: $(Global.company)-$(Global.project)-$(Global.domain)
- name: Terraform.stateWorkspace
  value: $(Global.company)-$(Global.project)-$(Global.domain)-$(environment)


# Resource Configuration
# INFO: CosmosDB.accountName is auto-generated!
- name: cosmosDB.databaseName
  value: Stacks
- name: cosmosDB.collectionName
  value: Menu
- name: cosmosDB.collectionPartitionKey
  value: id

stages:
- stage: Build
  variables:
  - group: amido-stacks-infra-credentials-prod # Used to pull artefact from prod store
  jobs:

  # Set build number
  - template: azDevOps/azure/templates/jobs/build-updatebuildnumber.yml@templates
    parameters:
      build_number: $(Version.Tag)

  # Validate and Publish Terraform
  - job: Validate
    dependsOn: UpdateBuildNumber
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
      - template: azDevOps/azure/templates/steps/build-validate-terraform.yml@templates
        parameters:
          terraform_artefact_name: terraform
          terraform_filepath: '$(Build.SourcesDirectory)/deploy/terraform/azure'

  # Retrieve a blob file with only Azure credentials, extract it and publish as an artefact
  - template: azDevOps/azure/templates/jobs/publish-blob-as-artefact.yml@templates
    parameters:
      Package_RG: $(DevOps.RG)
      Package_storageAccount: $(DevOps.storageAccount)
      Package_Container: $(DevOps.Container)
      Package_File: $(DevOps.File)
      Package_OutputFolder: $(Build.BinariesDirectory)
      Package_OutputArtefact: 'DevOps'

- stage: NonProduction
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN

  jobs:
  - deployment: Dev
    pool:
      vmImage: 'ubuntu-latest'
    environment: dev
    variables:
    - name: environment
      value: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - template: azDevOps/azure/templates/steps/login-services.yml@templates
            parameters:
              # Azure
              login_azure: true
              azure_tenant_id: '$(azure_tenant_id)'
              azure_subscription_id: '$(azure_subscription_id)'
              azure_client_id: '$(azure_client_id)'
              azure_client_secret: '$(azure_client_secret)'
              # Kubernetes
              login_kubernetes: false
              # aks_rg: ''
              # aks_clustername: ''
              devops_artefact_name: 'DevOps'

          # TODO: This is not a shared template, because it has specific resource parameters. I'm sure there is a way to provide a paramater array and have that mapped as env vars
          # see here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#iterative-insertion

          - template: templates/steps/deploy-provisioning-terraform.yml
            # Terraform Backend & Azure Credential config comes via Variable Group
            # that must be inherited into this step!
            parameters:
              # Terraform Basic Config
              terraform_artefact_name: 'terraform'
              #  Terraform State Config
              terraform_state_rg: '$(Terraform.stateRG)'
              terraform_state_storage: '$(Terraform.stateStorageAccount)'
              terraform_state_container: '$(Terraform.stateStorageContainer)'
              terraform_state_key: '$(Terraform.stateKey)'
              terraform_state_workspace: '$(Terraform.stateWorkspace)'
              # Global Config
              company: '$(Global.company)'
              project: '$(Global.project)'
              domain: '$(Global.domain)'
              environment: '$(environment)'
              # Azure config
              location: 'uksouth'
              tags: "{}"
              # Resource Specific Config
              cosmosDBdatabaseName: '$(cosmosDB.databaseName)'

  - deployment: Test # This should be made into a meta-template when it's available!
    pool:
      vmImage: 'ubuntu-latest'
    environment: test
    variables:
    - name: environment
      value: test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - template: azDevOps/azure/templates/steps/login-services.yml@templates
            parameters:
              # Azure
              login_azure: true
              azure_tenant_id: '$(azure_tenant_id)'
              azure_subscription_id: '$(azure_subscription_id)'
              azure_client_id: '$(azure_client_id)'
              azure_client_secret: '$(azure_client_secret)'
              # Kubernetes
              login_kubernetes: false
              # aks_rg: ''
              # aks_clustername: ''
              devops_artefact_name: 'DevOps'

          # This is not a shared template, because it has specific resource parameters
          - template: templates/steps/deploy-provisioning-terraform.yml
            # Terraform Backend & Azure Credential config comes via Variable Group
            # that must be inherited into this step!
            parameters:
              # Terraform Basic Config
              terraform_artefact_name: 'terraform'
              #  Terraform State Config
              terraform_state_rg: '$(Terraform.stateRG)'
              terraform_state_storage: '$(Terraform.stateStorageAccount)'
              terraform_state_container: '$(Terraform.stateStorageContainer)'
              terraform_state_key: '$(Terraform.stateKey)'
              terraform_state_workspace: '$(Terraform.stateWorkspace)'
              # Global Config
              company: '$(Global.company)'
              project: '$(Global.project)'
              domain: '$(Global.domain)'
              environment: '$(environment)'
              # Azure config
              location: 'uksouth'
              tags: "{}"
              # Resource Specific Config
              cosmosDBdatabaseName: '$(cosmosDB.databaseName)'

- stage: Production
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
  - group: amido-stacks-infra-credentials-prod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN

  jobs:
  - deployment: Performance # This should be made into a meta-template when it's available!
    pool:
      vmImage: 'ubuntu-latest'
    environment: perf
    variables:
    - name: environment
      value: perf
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - template: azDevOps/azure/templates/steps/login-services.yml@templates
            parameters:
              # Azure
              login_azure: true
              azure_tenant_id: '$(azure_tenant_id)'
              azure_subscription_id: '$(azure_subscription_id)'
              azure_client_id: '$(azure_client_id)'
              azure_client_secret: '$(azure_client_secret)'
              # Kubernetes
              login_kubernetes: false
              # aks_rg: ''
              # aks_clustername: ''
              devops_artefact_name: 'DevOps'

          # This is not a shared template, because it has specific resource parameters
          - template: templates/steps/deploy-provisioning-terraform.yml
            # Terraform Backend & Azure Credential config comes via Variable Group
            # that must be inherited into this step!
            parameters:
              # Terraform Basic Config
              terraform_artefact_name: 'terraform'
              #  Terraform State Config
              terraform_state_rg: '$(Terraform.stateRG)'
              terraform_state_storage: '$(Terraform.stateStorageAccount)'
              terraform_state_container: '$(Terraform.stateStorageContainer)'
              terraform_state_key: '$(Terraform.stateKey)'
              terraform_state_workspace: '$(Terraform.stateWorkspace)'
              # Global Config
              company: '$(Global.company)'
              project: '$(Global.project)'
              domain: '$(Global.domain)'
              environment: '$(environment)'
              # Azure config
              location: 'uksouth'
              tags: "{}"
              # Resource Specific Config
              cosmosDBdatabaseName: '$(cosmosDB.databaseName)'

  - deployment: Prod # This should be made into a meta-template when it's available!
    pool:
      vmImage: 'ubuntu-latest'
    environment: prod
    variables:
    - name: environment
      value: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - template: azDevOps/azure/templates/steps/login-services.yml@templates
            parameters:
              # Azure
              login_azure: true
              azure_tenant_id: '$(azure_tenant_id)'
              azure_subscription_id: '$(azure_subscription_id)'
              azure_client_id: '$(azure_client_id)'
              azure_client_secret: '$(azure_client_secret)'
              # Kubernetes
              login_kubernetes: false
              # aks_rg: ''
              # aks_clustername: ''
              devops_artefact_name: 'DevOps'

          # This is not a shared template, because it has specific resource parameters
          - template: templates/steps/deploy-provisioning-terraform.yml
            # Terraform Backend & Azure Credential config comes via Variable Group
            # that must be inherited into this step!
            parameters:
              # Terraform Basic Config
              terraform_artefact_name: 'terraform'
              #  Terraform State Config
              terraform_state_rg: '$(Terraform.stateRG)'
              terraform_state_storage: '$(Terraform.stateStorageAccount)'
              terraform_state_container: '$(Terraform.stateStorageContainer)'
              terraform_state_key: '$(Terraform.stateKey)'
              terraform_state_workspace: '$(Terraform.stateWorkspace)'
              # Global Config
              company: '$(Global.company)'
              project: '$(Global.project)'
              domain: '$(Global.domain)'
              environment: '$(environment)'
              # Azure config
              location: 'uksouth'
              tags: "{}"
              # Resource Specific Config
              cosmosDBdatabaseName: '$(cosmosDB.databaseName)'
