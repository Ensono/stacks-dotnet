name: $(build.SourceBranchName)-init

trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - src/api/xxAMIDOxx.xxSTACKSxx.API.Models/*
    - deploy/terraform/*
  

# Only build PR's into Master (i.e. 'going live')
pr:
- master
    
resources:
- repo: self

variables:
# Global Config:
- name: Global.Company
  value: amido
- name: Global.Platform
  value: stacks
- name: Global.Component
  value: dotnet

# Versioning
- name: Version.Major
  value: 1
- name: Version.Minor
  value: 4
- name: Version.Revision
  value: $[counter(variables['Version.Minor'], 0)]

# Tests
- name: Test.FunctionalTestProjectFile
  value: xxAMIDOxx.xxSTACKSxx.Tests.Api.csproj
- name: Test.FunctionalTestProjectSourcePath
  value: $(Pipeline.Workspace)/tests/xxAMIDOxx.xxSTACKSxx.Tests/xxAMIDOxx.xxSTACKSxx.Tests.Api
- name: Test.FunctionalTestProjectBuildPath
  value: $(Build.BinariesDirectory)
- name: Test.FunctionalTestReportSourcePath
  value: $(Pipeline.Workspace)/tests/xxAMIDOxx.xxSTACKSxx.Tests/xxAMIDOxx.xxSTACKSxx.Tests.Api/bin/Debug/netcoreapp2.2/BDDfy.html
- name: Test.FunctionalTestReportTargetName
  value: $(Docker.ImageName)/$(Build.BuildNumber)-$(Release.Environment).html
- name: Test.FunctionalTestReportStorageAccountRG
  value: amido-stacks-rg-uks-prod
- name: Test.FunctionalTestReportStorageAccountName
  value: amidostacksuksprod
- name: Test.FunctionalTestReportStorageContainerName
  value: testresults 
- name: Test.ProviderContractTestProjectSourcePath
  value: '$(Build.SourcesDirectory)/src/api/xxAMIDOxx.xxSTACKSxx.API.ContractTests'
- name: Test.TestsSourcePath
  value: $(Build.SourcesDirectory)/src/tests/
- name: Test.PerformanceTestProjectSourcePath
  value: $(Pipeline.Workspace)/tests/xxAMIDOxx.xxSTACKSxx.Performance/xxAMIDOxx.xxSTACKSxx.Gatling.Tests
# Used in Functional Tests as ENV VAR
- name: BaseUrl
  value: https://$(Release.Environment).amidostacks.com/api/menu/


- name: Sonar.serviceConnection
  value: 'amido-sonarcloud'
- name: Sonar.organization
  value: 'amido'
- name: Sonar.scannerMode
  value: 'MSBuild'
- name: Sonar.projectKey
  value: 'stacks-dotnet'
- name: Sonar.projectName
  value: $(Docker.ImageName)
- name: Sonar.projectVersion
  value: $(Docker.ImageTag)

# Release Notes
- name: ReleaseNote.TargetName
  value: $(Docker.ImageName)/$(Build.BuildNumber).json
- name: ReleaseNote.StorageAccountRG
  value: amido-stacks-rg-uks-prod
- name: ReleaseNote.StorageAccountName
  value: amidostacksuksprod
- name: ReleaseNote.StorageContainerName
  value: releasenotes

# SonarCloud Info
- name: Test.sonarProjectKey
  value: stacks-dotnet

# Pact Broker Info
- name: Test.PactBrokerUrl
  value: https://amido-stacks.pact.dius.com.au
# Specific Pact Contract Test Variables as ENV VAR
- name: BROKER_URL
  value: $(Test.PactBrokerUrl)
- name: BUILD_NUMBER
  value: $(Docker.ImageTag)
- name: BROKER_TOKEN
  value: $(Test.PactBearerToken)

# Docker Config
- name: Docker.DockerfilePath
  value: src/api/
- name: Docker.ImageName
  value: api-image
- name: Docker.ImageTag
  value: $(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)
- name: Docker.ContainerRegistry
  value: $(Docker.ContainerRegistryName).azurecr.io
- name: Docker.ContainerRegistryNameNonProd
  value: amidouksstacksacrdevx
- name: Docker.ContainerRegistryNameProd
  value: amidouksstacksacrprod


#Â Kubernetes Config:
- name: Kubernetes.ArtifactHelmpath
  value: helm-chart/
- name: Kubernetes.ArtifactKustomizePath
  value: base/
- name: Kubernetes.UseHelm
  value: false
- name: Kubernetes.UseKustomize
  value: true
- name: Kubernetes.YMLfilepath
  value: deploy/k8s/api

# Packages Config:
- name: Kubernetes.KustomizeBinaryPath
  value: $(System.DefaultWorkingDirectory)/kustomize
- name: Kubernetes.KustomizeDownloadPath
  value: https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64

# Package Info
- name: Package.File
  value: scripts-1.1.2-master.tar.gz
- name: Package.Container
  value: packages
- name: Package.storageAccount
  value: amidostacksuksprod
- name: Package.RG
  value: amido-stacks-rg-uks-prod

stages:
- stage: Build
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: $(Docker.ContainerRegistryNameNonProd)
  jobs:
  - job: GetDevOpsScripts
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
        # The following step is wholly in-line because we haven't yet downloaded the package which contains the script file! 
      - bash: | 
          az login --service-principal --username $(azure_client_id) --password $(azure_client_secret) --tenant $(azure_tenant_id)
          az account set -s $(azure_subscription_id)
          ACCOUNT_KEY=$(az storage account keys list -g $(Package.RG) -n $(Package.storageAccount) --query '[1].value')
          SAS_KEY_EXPIRY=$(date -d "1 month" '+%Y-%m-%dT%H:%MZ')
          SAS_KEY=$(az storage account generate-sas --permissions lr --account-name $(Package.storageAccount) --account-key $ACCOUNT_KEY --services b --resource-types sco --expiry $SAS_KEY_EXPIRY -otsv)
          SAS_KEY=$(sed -e 's/^"//' -e 's/"$//' <<<"$SAS_KEY")
          BLOB_URL=$(az storage blob url --account-name $(Package.storageAccount) --account-key $ACCOUNT_KEY --container-name $(Package.Container) --name $(Package.File))
          BLOB_URL=$(sed -e 's/^"//' -e 's/"$//' <<<"$BLOB_URL")
          wget -O $(Build.BinariesDirectory)/$(Package.File) $BLOB_URL?$SAS_KEY
          az logout --username $(azure_client_id)
        displayName: Get DevOps Scripts
        workingDirectory: $(Build.BinariesDirectory)
        
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
          destinationFolder: $(Build.BinariesDirectory)/DevOps
        displayName: Extract DevOps Scripts

      - publish: $(Build.BinariesDirectory)/DevOps
        artifact: DevOps


  - job: Analyse
    continueOnError: true
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo '##vso[build.updatebuildnumber]$(Docker.ImageTag)'
      displayName: 'Update: Build Number'
      
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: $(Sonar.serviceConnection)
        organization: $(Sonar.organization)
        scannerMode: $(Sonar.scannerMode)
        projectKey: $(Sonar.projectKey)
        projectName: $(Sonar.projectName)
        projectVersion: $(Sonar.projectVersion)
      displayName: Prepare for SonarCloud Analysis
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        workingDirectory: $(Build.SourcesDirectory)/src/api

    - task: SonarCloudAnalyze@1
      displayName: Anaylse Code via SonarCloud 

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish: SonarCloud Results'

  - job: Build
    dependsOn: GetDevOpsScripts
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Functional Tests Artifact'
      inputs:
        PathtoPublish: '$(Test.TestsSourcePath)'
        ArtifactName: 'tests'

    - download: current
      displayName: Download DevOps Artefacts
      artifact: DevOps

    - task: Bash@3
      displayName:  'Install: DevOps Tools'
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/DevOps/Bootstrap/install-cicd-prereqs.sh
        arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

    - task: Bash@3
      displayName: 'Login: Azure'
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
        arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
        failOnStderr: true 

    - task: DotNetCoreCLI@2
      displayName: 'Run Provider Contract Tests'
      inputs:
        command: test
        projects: '$(Test.ProviderContractTestProjectSourcePath)/*.csproj'
        arguments: '-v n'
        testRunTitle: 'Provider Contract Tests'
    
    - bash: |
        docker build . -t $(Docker.ImageName):$(Docker.ImageTag) -t $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag) -t $(Docker.ContainerRegistry)/$(Docker.ImageName):latest
      displayName: Build Container Image 
      workingDirectory: $(Build.SourcesDirectory)/$(Docker.DockerfilePath)

#### Vulnerability Scanning

    - task: Bash@3
      displayName: 'Vulnerability Scan'
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/DevOps/Docker/new-image-scan.sh
        arguments: $(Docker.ImageName) $(Docker.ImageTag)
        workingDirectory: $(Build.ArtifactStagingDirectory)
      continueOnError: true

#### Vulnerability Scanning

    - bash: |
        az acr login --name $(Docker.ContainerRegistryName) # this is super annoying
        docker push $(Docker.ContainerRegistry)/$(Docker.ImageName)
      displayName: Push Container Image to Azure Container Registry
      workingDirectory: $(Build.SourcesDirectory)/$(Docker.DockerfilePath)

    - publish: $(Build.SourcesDirectory)/$(Kubernetes.YMLfilepath)
      artifact: build
      displayName: 'Publish: Build Artefacts'

    - task: Bash@3
      displayName: 'Create Release Notes'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/DevOps/ReleaseNotes/create-releasenotes-from-github-pr.sh
        arguments: $(Docker.ImageTag) $(ReleaseNote.GitHubUsername) $(ReleaseNote.GitHubToken) $(Global.Company) $(Global.Platform)-$(Global.Component) $(Build.ArtifactStagingDirectory)/release.json false

    - publish: $(Build.ArtifactStagingDirectory)
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      artifact: releasenotes
      displayName: 'Publish: Release Notes Artefact'


      
- stage: NonProduction
  variables: 
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: $(Docker.ContainerRegistryNameNonProd)
  jobs:
  - deployment: DevX # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: devx
    # AKS Cluster Info
    variables:
    - name: Release.Environment
      value: devx
    - name: Kubernetes.ClusterRG
      value: amido-stacks-rg-uks-devx
    - name:  Kubernetes.ClusterName
      value: amido-stacks-aks-uks-devx
    - name: Kubernetes.KustomizeFilePath
      value: $(Release.Environment)
      # Application Secret Retrieval
    - name: CosmosDB.accountName
      value: amidostacksmenucdauksdevx
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: 'Download: Build Artefacts'
            artifact: build

          - download: current
            displayName: 'Download: Test Artefacts'
            artifact: tests

          - download: current
            displayName: 'Download: DevOps Artefacts'
            artifact: DevOps

          - task: Bash@3
            displayName: 'Install: DevOps Tools'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: 'Login: Azure'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: 'Login: Kubernetes'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 

            # This step writes to cosmosDB.key and cosmosDB.endoint for consumption later in the pipeline
          - task: Bash@3
            displayName: Get CosmosDB Key and Endpoint
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-cosmosdb-key-endpoint.sh
              arguments: $(CosmosDB.accountName)

          - task: Bash@3
            displayName:  Inject Secrets from Environment Vars
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/inject-secrets-from-env-var.sh
              arguments: $(Pipeline.Workspace)/build/kustomization/$(Kubernetes.KustomizeFilePath)/secrets
              failOnStderr: true 
            env:
              cosmosdb_key: $(CosmosDB.key)
              appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)


          - bash: |
             echo "Setting image to $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image $(Docker.ImageName)=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Kubernetes.KustomizeFilePath)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - task: DotNetCoreCLI@2
            displayName: 'Run Functional Tests'
            inputs:
              command: test
              projects: '$(Test.FunctionalTestProjectSourcePath)/$(Test.FunctionalTestProjectFile)'
              arguments: '-v n'
              testRunTitle: 'Functional Tests'
          
          - task: Bash@3
            displayName: 'Upload: Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportSourcePath) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)


  - deployment: TestX # This should be made into a meta-template when it's available! 
    dependsOn: DevX
    pool:
      vmImage: 'ubuntu-latest'
    environment: testx
    variables: 
    - name: Release.Environment
      value: testx
    # AKS Cluster Info
    - name: Kubernetes.ClusterRG
      value: amido-stacks-rg-uks-devx
    - name:  Kubernetes.ClusterName
      value: amido-stacks-aks-uks-devx
    - name: Kubernetes.KustomizeFilePath
      value: $(Release.Environment)
      # Application Secret Retrieval
    - name: CosmosDB.accountName
      value: amidostacksmenucdaukstestx
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: 'Download: Build Artefacts'
            artifact: build

          - download: current
            displayName: 'Download: Test Artefacts'
            artifact: tests

          - download: current
            displayName: 'Download: DevOps Artefacts'
            artifact: DevOps

          - task: Bash@3
            displayName: 'Install: DevOps Tools'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: 'Login: Azure'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: 'Login: Kubernetes'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 
            
            # This step writes to cosmosDB.key and cosmosDB.endoint for consumption later in the pipeline
          - task: Bash@3
            displayName: Get CosmosDB Key and Endpoint
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-cosmosdb-key-endpoint.sh
              arguments: $(CosmosDB.accountName)

          - task: Bash@3
            displayName:  Inject Secrets from Environment Vars
            inputs:
              targetType: 'filePath' 
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/inject-secrets-from-env-var.sh
              arguments: $(Pipeline.Workspace)/build/kustomization/$(Kubernetes.KustomizeFilePath)/secrets
              failOnStderr: true 
            env:
              cosmosdb_key: $(CosmosDB.key)
              appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)

          - bash: |
             echo "Setting image to $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image $(Docker.ImageName)=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Kubernetes.KustomizeFilePath)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - task: DotNetCoreCLI@2
            displayName: 'Run Functional Tests'
            inputs:
              command: test
              projects: '$(Test.FunctionalTestProjectSourcePath)/$(Test.FunctionalTestProjectFile)'
              arguments: '-v n'
              testRunTitle: 'Functional Tests'
          
          - task: Bash@3
            displayName: 'Upload: Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportSourcePath) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

          - task: Bash@3
            displayName: 'Retrieve URL: Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-azstorage-sasurl.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

- stage: Promotion
  variables:
  - group: amido-stacks-infra-credentials-prod
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: PromoteImage
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps
  
          - task: Bash@3
            displayName: 'Promote Image'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/promote-acr-image.sh
              arguments:  $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret) $(Docker.ContainerRegistryNameNonProd) $(Docker.ContainerRegistryNameProd) $(Docker.ImageName) $(Docker.ImageTag)

- stage: Production
  variables: 
  - group: amido-stacks-infra-credentials-prod
  - name: Docker.ContainerRegistryName
    value: $(Docker.ContainerRegistryNameProd)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Perf # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: perf
    # AKS Cluster Info
    variables:
    - name: Release.Environment
      value: perf
    - name: Kubernetes.ClusterRG
      value: amido-stacks-rg-uks-prod
    - name:  Kubernetes.ClusterName
      value: amido-stacks-aks-uks-prod
    - name: Kubernetes.KustomizeFilePath
      value: $(Release.Environment)
      # Application Secret Retrieval
    - name: CosmosDB.accountName
      value: amidostacksmenucdauksperf
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: 'Download: Build Artefacts'
            artifact: build

          - download: current
            displayName: 'Download: Test Artefacts'
            artifact: tests

          - download: current
            displayName: 'Download: DevOps Artefacts'
            artifact: DevOps

          - task: Bash@3
            displayName: 'Install: DevOps Tools'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: 'Login: Azure'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: 'Login: Kubernetes'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 

            # This step writes to cosmosDB.key and cosmosDB.endoint for consumption later in the pipeline
          - task: Bash@3
            displayName: Get CosmosDB Key and Endpoint
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-cosmosdb-key-endpoint.sh
              arguments: $(CosmosDB.accountName)

          - task: Bash@3
            displayName:  Inject Secrets from Environment Vars
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/inject-secrets-from-env-var.sh
              arguments: $(Pipeline.Workspace)/build/kustomization/$(Kubernetes.KustomizeFilePath)/secrets
              failOnStderr: true 
            env:
              cosmosdb_key: $(CosmosDB.key)
              appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)


          - bash: |
             echo "Setting image to $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image $(Docker.ImageName)=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Kubernetes.KustomizeFilePath)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - bash: | 
              echo "-Denv=$(Release.Environment) -Dusers=$(Performance.Testing.Users) -Drampup=$(Performance.Testing.RampUp)"
              mvn clean gatling:test -Denv=$(Release.Environment) -Dusers=$(Performance.Testing.Users) -Drampup=$(Performance.Testing.RampUp)
            workingDirectory: '$(Test.PerformanceTestProjectSourcePath)'
            displayName: Run Performance Tests
            

  - deployment: Prod # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: Perf
    environment: prod
    variables: 
    - name: Release.Environment
      value: prod
    # AKS Cluster Info
    - name: Kubernetes.ClusterRG
      value: amido-stacks-rg-uks-prod
    - name:  Kubernetes.ClusterName
      value: amido-stacks-aks-uks-prod
    - name: Kubernetes.KustomizeFilePath
      value: $(Release.Environment)
      # Application Secret Retrieval
    - name: CosmosDB.accountName
      value: amidostacksmenucdauksprod
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: 'Download: Build Artefacts'
            artifact: build

          - download: current
            displayName: 'Download: Test Artefacts'
            artifact: tests

          - download: current
            displayName: 'Download: DevOps Artefacts'
            artifact: DevOps

          - task: Bash@3
            displayName: 'Install: DevOps Tools'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: 'Login: Azure'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: 'Login: Kubernetes'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 
            
            # This step writes to cosmosDB.key and cosmosDB.endoint for consumption later in the pipeline
          - task: Bash@3
            displayName: Get CosmosDB Key and Endpoint
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-cosmosdb-key-endpoint.sh
              arguments: $(CosmosDB.accountName)

          - task: Bash@3
            displayName:  Inject Secrets from Environment Vars
            inputs:
              targetType: 'filePath' 
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/inject-secrets-from-env-var.sh
              arguments: $(Pipeline.Workspace)/build/kustomization/$(Kubernetes.KustomizeFilePath)/secrets
              failOnStderr: true 
            env:
              cosmosdb_key: $(CosmosDB.key)
              appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)

          - bash: |
             echo "Setting image to $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image $(Docker.ImageName)=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Kubernetes.KustomizeFilePath)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - download: current
            displayName: 'Download: Release Notes Artefact'
            artifact: releasenotes
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

          - task: Bash@3
            displayName: 'Upload: Release Notes'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(ReleaseNote.StorageAccountRG) $(Pipeline.Workspace)/releasenotes/release.json $(ReleaseNote.StorageAccountName) $(ReleaseNote.StorageContainerName) $(ReleaseNote.TargetName)

          - task: Bash@3
            displayName: 'Retrieve URL: Release Notes'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/get-azstorage-sasurl.sh
              arguments: $(ReleaseNote.StorageAccountRG) $(ReleaseNote.StorageAccountName) $(ReleaseNote.StorageContainerName) $(ReleaseNote.TargetName)