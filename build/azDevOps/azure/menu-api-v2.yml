name: $(build.SourceBranchName)-init

trigger:
  paths:
    exclude:
    - src/api/xxAMIDOxx.xxSTACKSxx.Models

resources:
- repo: self

variables:
- group: amido-stacks-infra-credentials-nonprod
- group: amido-stacks-pact-credentials
- group: amido-stacks-releasenote-credentials
# testing new variable group
# - group: amido-stacks-credentials-azure-nonprod

# Global Config:
- name: Global.Company
  value: amido
- name: Global.Platform
  value: stacks
- name: Global.Component
  value: dotnet

# Versioning
- name: Version.Major
  value: 1
- name: Version.Minor
  value: 2
- name: Version.MajorMinor
  value: $(Version.Major).$(Version.Minor)
- name: Version.Revision
  value: $[counter(variables['Version.MajorMinor'], 0)]

# Tests
- name: Test.FunctionalTestProjectFile
  value: xxAMIDOxx.xxSTACKSxx.Tests.Api.csproj
- name: Test.FunctionalTestProjectSourcePath
  value: $(Build.SourcesDirectory)/src/tests/xxAMIDOxx.xxSTACKSxx.Tests/xxAMIDOxx.xxSTACKSxx.Tests.Api
- name: Test.FunctionalTestProjectBuildPath
  value: $(Build.BinariesDirectory)
- name: Test.FunctionalTestReportSourcePath
  value: $(Test.FunctionalTestProjectSourcePath)/bin/Debug/netcoreapp2.2/BDDfy.html
- name: Test.FunctionalTestReportTargetName
  value: menu-api/$(Build.BuildNumber)-$(Release.Environment).html
- name: Test.FunctionalTestReportStorageAccountRG
  value: amido-stacks-rg-uks
- name: Test.FunctionalTestReportStorageAccountName
  value: amidostackstestsgbl
- name: Test.FunctionalTestReportStorageContainerName
  value: testresults 
- name: Test.ProviderContractTestProjectSourcePath
  value: '$(Build.SourcesDirectory)/src/api/xxAMIDOxx.xxSTACKSxx.API.ContractTests'  

# Release Notes
- name: ReleaseNote.LocalPath
  value: $(Pipeline.Workspace)/build/release.json
- name: ReleaseNote.TargetName
  value: menu-api/$(Build.BuildNumber).json
- name: ReleaseNote.StorageAccountRG
  value: amido-stacks-rg-uks
- name: ReleaseNote.StorageAccountName
  value: amidostackstestsgbl
- name: ReleaseNote.StorageContainerName
  value: releases 

# Pact Broker Info
- name: Test.PactBrokerUrl
  value: https://amido-stacks.pact.dius.com.au
- name: Test.PactApiToken
  value: r2xlwu-YY3_sl0o0s03O3g

# Docker Config
- name: Docker.DockerfilePath
  value: src/api/
- name: Docker.ImageName
  value: menu-api
- name: Docker.ImageTag
  value: $(Version.MajorMinor).$(Version.Revision)-$(build.sourcebranchname)
- name: Docker.ContainerRegistry
  value: amidouksstacksacrnp.azurecr.io

#Â Kubernetes Config:
- name: Kubernetes.ArtifactHelmpath
  value: helm-chart/
- name: Kubernetes.ArtifactKustomizePath
  value: base/
- name: Kubernetes.UseHelm
  value: false
- name: Kubernetes.UseKustomize
  value: true
- name: Kubernetes.YMLfilepath
  value: deploy/k8s/api

# Packages Config:
- name: Kubernetes.KustomizeBinaryPath
  value: $(System.DefaultWorkingDirectory)/kustomize
- name: Kubernetes.KustomizeDownloadPath
  value: https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64
- name: Package.File
  value: scripts-0.0.28-master.tar.gz
- name: Package.SAS
  value: 'se=2019-09-06T12%3A23Z&sp=rl&sv=2018-03-28&ss=b&srt=sco&sig=lcr6/x7rq04FpRlNfFXd%2BRq0S0A1QEyQH/0wDi48Y6M%3D'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
    - script: echo '##vso[build.updatebuildnumber]$(Docker.ImageTag)'
      displayName: Update Build Number
  
  
    #- task: DotNetCoreCLI@2
    #  displayName: Build Functional Tests
    #  displayName: 'dotnet publish tests'
    #  inputs:
    #    command: publish
    #    projects: '$(Test.FunctionalTestProjectSourcePath)'
    #    publishWebProjects: False
    #    arguments: ' --output $(Test.FunctionalTestProjectBuildPath)'
    #    zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact - Functional Tests
      inputs:
        PathtoPublish: '$(Test.FunctionalTestProjectSourcePath)'
        ArtifactName: 'tests'

    - bash: | 
        wget -O $(Build.BinariesDirectory)/$(Package.File)  'https://amidostackspkgukstmp.blob.core.windows.net/packages/$(Package.File)?$(Package.SAS)'
      displayName: Get DevOps Scripts
      workingDirectory: $(Build.BinariesDirectory)
    
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
        destinationFolder: $(Build.BinariesDirectory)/DevOps
      displayName: Extract DevOps Scripts

    - task: Bash@3
      displayName: Install CICD Prereqs
      inputs:
        targetType: 'filePath'
        filePath: $(Build.BinariesDirectory)/DevOps/Bootstrap/install-cicd-prereqs.sh
        arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

# This is problematic because it doesn't inherit the Azure login information
#
    - task: Bash@3
      displayName: Azure Login
      inputs:
        targetType: 'filePath'
        filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-azure-context.sh
        arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
        failOnStderr: true 

#    - task: Bash@3
#      displayName: Docker Build and Push
#      inputs:
#        targetType: 'filePath'
#        filePath: $(Build.BinariesDirectory)/DevOps/Docker/docker-build-and-push.sh
#        arguments: $(Docker.ImageName) $(Docker.ImageTag) $(Docker.ContainerRegistry)
#        failOnStderr: true 
#        workingDirectory: $(Build.SourcesDirectory)/$(Docker.DockerfilePath)
#
# This is problematic because it doesn't inherit the Azure login information

    - bash: |
        az acr login --name amidouksstacksacrnp # this is super annoying
        docker build . -t $(Docker.ImageName):$(Docker.ImageTag) -t $(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag) -t $(Docker.ContainerRegistry)/$(Docker.ImageName):latest
        docker push $(Docker.ContainerRegistry)/$(Docker.ImageName)
      displayName: Docker Build and Push to Az ACR
      workingDirectory: $(Build.SourcesDirectory)/$(Docker.DockerfilePath)

    - script: |
        echo "##vso[task.setvariable variable=BROKER_URL]$(Test.PactBrokerUrl)"
        echo "##vso[task.setvariable variable=BUILD_NUMBER]$(Docker.ImageTag)"
        echo "##vso[task.setvariable variable=BROKER_TOKEN]$(Test.PactApiToken)"
      displayName: set environment variable for subsequent steps

    - task: DotNetCoreCLI@2
      displayName: 'Run Provider Contract Tests'
      inputs:
        command: test
        projects: '$(Test.ProviderContractTestProjectSourcePath)/*.csproj'
        arguments: '-v n'
        testRunTitle: 'Provider Contract Tests'

    - publish: $(Build.SourcesDirectory)/$(Kubernetes.YMLfilepath)
      artifact: build
      displayName: Publish Build Artefacts

- stage: Dev
  variables: 
  - name: Release.Environment
    value: dev
  # Credentials
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-menu-credentials-dev
  # AKS Cluster Info
  - name: Kubernetes.ClusterRG
    value: amido-stacks-rg-uks-dev
  - name:  Kubernetes.ClusterName
    value: amido-stacks-cluster-uks-dev

  jobs:
  - deployment: Apply # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: Download Build Artefacts
            artifact: build

          - download: current
            displayName: Download Test Artefacts
            artifact: tests

          - bash: | 
              wget -O $(Build.BinariesDirectory)/$(Package.File)  'https://amidostackspkgukstmp.blob.core.windows.net/packages/$(Package.File)?$(Package.SAS)'
            displayName: Get DevOps Scripts
            workingDirectory: $(Build.BinariesDirectory)
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
              destinationFolder: $(Build.BinariesDirectory)/DevOps
            displayName: Extract DevOps Scripts

          - task: Bash@3
            displayName: Install CICD Prereqs
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: Login to Kubernetes Cluster via AZCLI
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 

          - bash: |
             echo $KEY > $VALUE
            displayName: Setting Key-Value - CosmosDB Connection
            failOnStderr: true
            env:
              KEY: $(CosmosDB.Key)
              VALUE: $(Pipeline.Workspace)/build/kustomization/$(Release.Environment)/secrets/cosmosdb/key

          - bash: |
             echo "Setting image tag to $(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image menuapi-image=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Release.Environment)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - script: |
              echo "##vso[task.setvariable variable=BaseUrl]http://dev.azure.amidostacks.com/api/menu/"
            displayName: set environment variable for subsequent steps

          - task: DotNetCoreCLI@2
            displayName: 'Run Functional Tests'
            inputs:
              command: test
              projects: '$(Pipeline.Workspace)/tests/$(Test.FunctionalTestProjectFile)'
              arguments: '-v n'
              testRunTitle: 'Functional Tests'
          
          - task: Bash@3
            displayName: 'Upload Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportSourcePath) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

- stage: Test
  variables: 
  - name: Release.Environment
    value: test
  # Credentials
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-menu-credentials-test
  # AKS Cluster Info
  - name: Kubernetes.ClusterRG
    value: amido-stacks-rg-uks-dev
  - name:  Kubernetes.ClusterName
    value: amido-stacks-cluster-uks-dev

  jobs:
  - deployment: Apply # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:

#### Prerequisites
          - download: current
            displayName: Download Build Artefacts
            artifact: build

          - download: current
            displayName: Download Test Artefacts
            artifact: tests

          - bash: | 
              wget -O $(Build.BinariesDirectory)/$(Package.File)  'https://amidostackspkgukstmp.blob.core.windows.net/packages/$(Package.File)?$(Package.SAS)'
            displayName: Get DevOps Scripts
            workingDirectory: $(Build.BinariesDirectory)
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
              destinationFolder: $(Build.BinariesDirectory)/DevOps
            displayName: Extract DevOps Scripts

          - task: Bash@3
            displayName: Install CICD Prereqs
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Bootstrap/install-cicd-prereqs.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Kubernetes.KustomizeDownloadPath)

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - task: Bash@3
            displayName: Login to Kubernetes Cluster via AZCLI
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-aks-context.sh
              arguments: $(Kubernetes.ClusterRG) $(Kubernetes.ClusterName)
              failOnStderr: true 

#### Kustomization
          - task: Bash@3
            displayName:  Kustomize Standard Version Annotation
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Kustomize/kustomize-annotate-version.sh
              arguments: $(Kubernetes.KustomizeBinaryPath) $(Docker.ImageTag)
              workingDirectory: $(Pipeline.Workspace)/build/base
              failOnStderr: true 

          - bash: |
             echo $KEY > $VALUE
            displayName: Setting Key-Value - CosmosDB Connection
            failOnStderr: true
            env:
              KEY: $(CosmosDB.Key)
              VALUE: $(Pipeline.Workspace)/build/kustomization/$(Release.Environment)/secrets/cosmosdb/key

          - bash: |
             echo "Setting image tag to $(Docker.ImageTag)"
             $(Kubernetes.KustomizeBinaryPath) edit set image menuapi-image=$(Docker.ContainerRegistry)/$(Docker.ImageName):$(Docker.ImageTag);
            workingDirectory: $(Pipeline.Workspace)/build/base
            displayName: Kustomize Application Deployment Customisation 
            failOnStderr: true 

#### Deployment
          - task: Bash@3
            displayName:  Kubectl Apply (with Kustomize)
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Kubectl/apply-with-kustomize.sh
              arguments: ./kustomization/$(Release.Environment)
              workingDirectory: $(Pipeline.Workspace)/build
              failOnStderr: true 

#### Testing
          - script: |
              echo "##vso[task.setvariable variable=BaseUrl]http://test.azure.amidostacks.com/api/menu/"
            displayName: set environment variable for subsequent steps

          - task: DotNetCoreCLI@2
            displayName: 'Run Functional Tests'
            inputs:
              command: test
              projects: '$(Pipeline.Workspace)/tests/$(Test.FunctionalTestProjectFile)'
              arguments: '-v n'
              testRunTitle: 'Functional Tests'
          
          - task: Bash@3
            displayName: 'Upload Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportSourcePath) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

          - task: Bash@3
            displayName: 'Create Release Notes'
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/ReleaseNotes/create-releasenotes-from-github-pr.sh
              arguments: $(Build.BuildNumber) $(ReleaseNote.GitHubToken) $(ReleaseNote.GitHubUsername) $(Global.Company) $(Global.Platform)-$(Global.Component) $(ReleaseNote.LocalPath)


          - task: Bash@3
            displayName: 'Upload Release Notes'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/upload-azstorage-blob.sh
              arguments: $(ReleaseNote.StorageAccountRG) $(ReleaseNote.LocalPath) $(ReleaseNote.StorageAccountName) $(ReleaseNote.StorageContainerName) $(ReleaseNote.TargetName)


          - task: Bash@3
            displayName: 'Retrieve URL for Test Results'
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/get-azstorage-sasurl.sh
              arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)
              failOnStderr: true 


          - task: Bash@3
            displayName: 'Retrieve URL for Release Notes'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/get-azstorage-sasurl.sh
              arguments: $(ReleaseNote.StorageAccountRG) $(ReleaseNote.StorageAccountName) $(ReleaseNote.StorageContainerName) $(ReleaseNote.TargetName)
              failOnStderr: true 


