name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

variables:
  - template: azuredevops-runner-vars.yml

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv

    jobs:
      # TODO: Convert this to TASKCTL
      - job: PackageBuild
        pool:
          vmImage: $(pool_vm_image)

        steps:

          - template: templates/air-api-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          # Copy the files into the correct place for packaging
          - task: Bash@3
            displayName: Prepare for Packaging
            inputs:
              targetType: "inline"
              workingDirectory: $(Agent.BuildDirectory)/s
              script: |
                cp $REPO_NAME/template.csproj .
                mkdir ./templates
                pushd templates
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME .
                popd

            env:
              ROOT_SRC_DIR: $(Agent.BuildDirectory)/s
              REPO_NAME: $(self_repo)

          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK 6.0.200'
            inputs:
              packageType: sdk
              version: 6.0.200
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            displayName: 'Build: Restore'
            inputs:
              command: 'restore'
              projects: '$(Agent.BuildDirectory)/s/**/*.csproj'
              feedsToUse: 'select'
              includeNuGetOrg: true

          - task: DotNetCoreCLI@2
            displayName: 'Test: Unit Tests'
            inputs:
              command: 'test'
              projects: '$(Agent.BuildDirectory)/s/*.csproj'
              arguments: '--no-restore'
              failOnStderr: true

          # Pack NuGet packages.
          - task: DotNetCoreCLI@2
            displayName: 'Build: Pack'
            inputs:
              command: 'pack'
              configuration: 'release'
              arguments: '--no-restore'
              versioningScheme: byEnvVar
              versionEnvVar: $(version_number)
              packagesToPack: '$(Agent.BuildDirectory)/s/*.csproj'

          # Upload the packages as artefacts
          - task: PublishPipelineArtifact@1
            displayName: Publish Templates
            inputs:
              path: $(Agent.BuildDirectory)/a
              artifact: packages

  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['create_release'], 'true'))
    variables:
      - group: amido-stacks-infra-credentials-prod
      - group: amido-stacks-nuget-credentials

    jobs:
      - job: CreateGitHubRelease
        dependsOn:
          - AppInfraProd
          - DeployProd
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - template: templates/air-api-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          # Download the artefacts from the build to create the release from
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'packages'
              path: $(Build.ArtifactStagingDirectory)/packages

          # Create a GitHub release with these packages
          - task: Bash@3
            displayName: "Taskctl: Release"
            inputs:
              targetType: inline
              script: taskctl release
              informationPreference: continue
            env:
              ARTIFACTS_LIST: $(ARTIFACTS_LIST)
              PUBLISH_RELEASE: ${{ variables.create_release }}
              DASHBOARD_INFLUX_TOKEN: $(DASHBOARD_INFLUX_TOKEN) # requires explicit mapping to be used as an env var
              NUGET_API_KEY: $(nuget_api_key)
              PUBLISH_SYMBOLS: $(nuget_publish_symbols)

