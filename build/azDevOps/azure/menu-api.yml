name: $(build.SourceBranchName)-init

trigger:
  branches:
    include:
    - "*"
  paths:
    include:
    - src/*
    exclude:
    - src/api/xxAMIDOxx.xxSTACKSxx.API.Models/*
    - deploy/terraform/*
    - build/azDevOps/azure/menu-provisioning.yml

# Only build PR's into Master (i.e. 'going live')
pr:
- master
    
resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    endpoint: williamayerst # Created when you set up the connection to GitHub from Azure DevOps


variables:
# Global Config:
- name: Global.Company
  value: amido
- name: Global.Platform
  value: stacks
- name: Global.Component
  value: dotnet

# Versioning
- name: Version.Major
  value: 1
- name: Version.Minor
  value: 4
- name: Version.Revision
  value: $[counter(variables['Version.Minor'], 0)]

# Tests
- name: Test.FunctionalTestProjectFile
  value: xxAMIDOxx.xxSTACKSxx.API.FunctionalTests.csproj
- name: Test.FunctionalTestProjectSourcePath
  value: $(Pipeline.Workspace)/tests/Functional/xxAMIDOxx.xxSTACKSxx.API.FunctionalTests
- name: Test.FunctionalTestProjectBuildPath
  value: $(Build.BinariesDirectory)
- name: Test.FunctionalTestReportSourcePath
  value: $(Pipeline.Workspace)/tests/Functional/xxAMIDOxx.xxSTACKSxx.API.FunctionalTests/bin/Debug/netcoreapp2.2/BDDfy.html
- name: Test.FunctionalTestReportTargetName
  value: $(Docker.ImageName)/$(Build.BuildNumber)-$(environment).html
- name: Test.FunctionalTestReportStorageAccountRG
  value: amido-stacks-rg-uks-prod
- name: Test.FunctionalTestReportStorageAccountName
  value: amidostacksuksprod
- name: Test.FunctionalTestReportStorageContainerName
  value: testresults 
- name: Test.ProviderContractTestProjectSourcePath
  value: '$(Build.SourcesDirectory)/src/api/xxAMIDOxx.xxSTACKSxx.API.ContractTests'
- name: Test.TestsSourcePath
  value: $(Build.SourcesDirectory)/src/tests/
- name: Test.PerformanceTestProjectSourcePath
  value: $(Pipeline.Workspace)/tests/Performance/xxAMIDOxx.xxSTACKSxx.API.PerformanceTests

- name: Sonar.serviceConnection
  value: 'amido-sonarcloud'
- name: Sonar.organization
  value: 'amido'
- name: Sonar.scannerMode
  value: 'MSBuild'
- name: Sonar.projectKey
  value: 'stacks-dotnet'
- name: Sonar.projectName
  value: $(Docker.ImageName)
- name: Sonar.projectVersion
  value: $(Docker.ImageTag)

# Release Notes
- name: ReleaseNote.TargetName
  value: $(Docker.ImageName)/$(Build.BuildNumber).json
- name: ReleaseNote.StorageAccountRG
  value: amido-stacks-rg-uks-prod
- name: ReleaseNote.StorageAccountName
  value: amidostacksuksprod
- name: ReleaseNote.StorageContainerName
  value: releasenotes

# SonarCloud Info
- name: Test.sonarProjectKey
  value: stacks-dotnet

# Pact Broker Info
- name: Test.PactBrokerUrl
  value: https://amido-stacks.pact.dius.com.au
# Specific Pact Contract Test Variables as ENV VAR
- name: BROKER_URL
  value: $(Test.PactBrokerUrl)
- name: BUILD_NUMBER
  value: $(Docker.ImageTag)
- name: BROKER_TOKEN
  value: $(Test.PactBearerToken)

# Docker Config
- name: Docker.DockerfilePath
  value: src/api/
- name: Docker.ImageName
  value: api-image
- name: Docker.ImageTag
  value: $(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)
- name: Docker.ContainerRegistry
  value: $(Docker.ContainerRegistryName).azurecr.io
- name: Docker.ContainerRegistryNameNonProd
  value: 
- name: Docker.ContainerRegistryNameProd
  value: amidouksstacksacrprod


#Â Kubernetes Config:
- name: Kubernetes.ArtifactHelmpath
  value: helm-chart/
- name: Kubernetes.ArtifactKustomizePath
  value: base/
- name: Kubernetes.UseHelm
  value: false
- name: Kubernetes.UseKustomize
  value: true
- name: Kubernetes.YMLfilepath
  value: deploy/k8s/api

# Packages Config:
- name: Kubernetes.KustomizeBinaryPath
  value: $(System.DefaultWorkingDirectory)/kustomize
- name: Kubernetes.KustomizeDownloadPath
  value: https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64

# DevOps Scripts Package Info
- name: DevOps.File
  value: scripts-1.2.8-master.tar.gz
- name: DevOps.Container
  value: packages
- name: DevOps.storageAccount
  value: amidostacksuksprod
- name: DevOps.RG
  value: amido-stacks-rg-uks-prod

stages:
- stage: Build
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: amidouksstacksacrdevx
  jobs:

  # Set build number
  - template: azDevOps/azure/templates/jobs/build-updatebuildnumber.yml@templates
    parameters:
      build_number: $(Docker.ImageTag)
  
  # Retrieve a blob file with only Azure credentials, extract it and publish as an artefact
  - template: azDevOps/azure/templates/jobs/publish-blob-as-artefact.yml@templates
    parameters:
      Package_RG: $(DevOps.RG)
      Package_storageAccount: $(DevOps.storageAccount) 
      Package_Container: $(DevOps.Container)
      Package_File: $(DevOps.File)
      Package_OutputFolder: $(Build.BinariesDirectory)
      Package_OutputArtefact: 'DevOps'

  # Analyse via SonarCloud
  - template: azDevOps/azure/templates/jobs/build-sonarcloud.yml@templates
    parameters:
      Sonar_serviceConnection: '$(Sonar.serviceConnection)'
      Sonar_organization: '$(Sonar.organization)'
      Sonar_scannerMode: '$(Sonar.scannerMode)'
      Sonar_projectKey: '$(Sonar.projectKey)'
      Sonar_projectName: '$(Sonar.projectName)'
      Sonar_projectVersion: '$(Sonar.projectVersion)'
      dotnet_build_path: $(Build.SourcesDirectory)/src/api
      
  - template: azDevOps/azure/templates/jobs/build-dotnet.yml@templates
    parameters:
      dependsOn: GetPackage
      devops_artefact_name: 'DevOps'
      # Docker Config
      docker_workdir: '$(Build.SourcesDirectory)/$(Docker.DockerfilePath)'
      docker_imagename: '$(Docker.ImageName)'
      docker_imagetag: '$(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)' 
      docker_containerregistryname: '$(Docker.ContainerRegistryName)'
      # Vulnerability Scanning
      vulnerability_scan: true
      vulnerability_workdir: '$(Build.ArtifactStagingDirectory)'
      #  Testing
      contract_test: true
      contract_test_project: '$(Test.ProviderContractTestProjectSourcePath)/*.csproj'
      functional_test: true
      functional_test_path: '$(Test.TestsSourcePath)'
      functional_test_artefact: 'tests'
      build_file: true
      build_file_path: '$(Build.SourcesDirectory)/$(Kubernetes.YMLfilepath)'
      build_file_artefact: 'build'
      # Release notes
      releasenote: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      releasenote_artefact: 'releasenotes'
      releasenote_version: $(Docker.ImageTag)
      releasenote_user: $(ReleaseNote.GitHubUsername)
      releasenote_token: $(ReleaseNote.GitHubToken)
      releasenote_github_org: '$(Global.Company)'
      releasenote_github_project: 'stacks-dotnet' # Repo name doesn't match domain/component unfortunately
      releasenote_output: $(Build.ArtifactStagingDirectory)/release.json
      releasenote_failonmissingPR: false
      
- stage: NonProduction
  variables: 
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: amidouksstacksacrdevx
  jobs:
    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        environment: 'devx'
        devops_artefact_name: 'DevOps'
        build_file: true
        build_artefact: 'build'
        functional_test: true
        functional_test_artefact: 'tests'
        functional_test_baseurl: https://devx.amidostacks.com/api/menu/
        performance_test: false
        smoke_test: false
        kubernetes_clusterrg: 'amido-stacks-rg-uks-devx'
        kubernetes_clustername: 'amido-stacks-aks-uks-devx'
        kubernetes_kustomize_filepath: 'kustomization/devx'
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksdevx
        appinsights_enabled: true
        appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)
        releasenote: false

    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        dependsOn: 'devx'
        environment: 'testx'
        # Artefact and Step Config
        devops_artefact_name: 'DevOps'
        build_file: true
        build_artefact: 'build'
        functional_test: true
        functional_test_artefact: 'tests'
        functional_test_baseurl: https://testx.amidostacks.com/api/menu/
        performance_test: false
        smoke_test: false
        # Kubernetes Config
        kubernetes_clusterrg: 'amido-stacks-rg-uks-devx'
        kubernetes_clustername: 'amido-stacks-aks-uks-devx'
        # Mutation Information
        kubernetes_kustomize_filepath: 'kustomization/testx'
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdaukstestx
        appinsights_enabled: true
        appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)
        # ReleaseNote Information
        releasenote: false

- stage: Promotion
  variables:
  - group: amido-stacks-infra-credentials-prod
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - template: azDevOps/azure/templates/jobs/build-promoteimage.yml@templates
      parameters:
        devops_artefact_name: 'DevOps'
        source_registry: $(Docker.ContainerRegistryNameNonProd)
        destination_registry: $(Docker.ContainerRegistryNameProd)
        docker_imagename: $(Docker.ImageName)
        docker_imagetag: $(Docker.ImageTag)

- stage: Production
  variables: 
  - group: amido-stacks-infra-credentials-prod
  - name: Docker.ContainerRegistryName
    value: amidouksstacksacrprod
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        environment: 'perf'
        devops_artefact_name: 'DevOps'
        build_file: true
        build_artefact: 'build'
        functional_test: false
        performance_test: true
        smoke_test: false
        kubernetes_clusterrg: 'amido-stacks-rg-uks-prod'
        kubernetes_clustername: 'amido-stacks-aks-uks-prod'
        kubernetes_kustomize_filepath: 'kustomization/perf'
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksperf
        appinsights_enabled: true
        appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)
        releasenote: false

    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        dependsOn: 'perf'
        environment: 'prod'
        # Artefact and Step Config
        devops_artefact_name: 'DevOps'
        build_file: true
        build_artefact: 'build'
        functional_test: false
        performance_test: false
        smoke_test: true
        # Kubernetes Config
        kubernetes_clusterrg: 'amido-stacks-rg-uks-devx'
        kubernetes_clustername: 'amido-stacks-aks-uks-devx'
        # Mutation Information
        kubernetes_kustomize_filepath: 'kustomization/prod'
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksprod
        appinsights_enabled: true
        appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)
        # ReleaseNote Information
        releasenote: true
        releasenote_artefact: 'releasenotes'
        releasenote_storageaccountrg: $(ReleaseNote.StorageAccountRG)
        releasenote_storageaccountname: $(ReleaseNote.StorageAccountName)
        releasenote_storageaccountcontainer: $(ReleaseNote.StorageContainerName)
        releasenote_sourcefile: $(Pipeline.Workspace)/releasenotes/release.json
        releasenote_targetfile: $(ReleaseNote.TargetName)