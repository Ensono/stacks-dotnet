name: $(build.SourceBranchName)-init

resources:
- repo: self

variables:
- name: system.debug
  value: true

# Versioning
- name: Version.Major
  value: 0
- name: Version.Minor
  value: 1
- name: Version.MajorMinor
  value: $(Version.Major).$(Version.Minor)
- name: Version.Revision
  value: $[counter(variables['Version.MajorMinor'], 0)]
- name: Version.Tag
  value: $(Version.MajorMinor).$(Version.Revision)-$(build.sourcebranchname)

# Package Info
  value: scripts-0.0.28-master.tar.gz
- name: Package.SAS
  value: 'se=2019-09-06T12%3A23Z&sp=rl&sv=2018-03-28&ss=b&srt=sco&sig=lcr6/x7rq04FpRlNfFXd%2BRq0S0A1QEyQH/0wDi48Y6M%3D'

# Terraform Global Variables:
- name: TF_VAR_name_company
  value: amido
- name: TF_VAR_name_platform
  value: stacks-menu
- name: TF_VAR_resource_group_tags
  value: "{}"
- name: TF_VAR_resource_group_location_env
  value: uksouth

# Terraform State Backend:
- name: TF_STATE_RG
  value: amido-stacks-rg-uks
- name: TF_STATE_STORAGEACCOUNT
  value: $(TF_VAR_name_company)$(TF_VAR_name_platform)tfstategbl
- name: TF_STATE_CONTAINERNAME
  value: tfstate
- name: TF_STATE_KEY
  value: $(TF_VAR_name_company)-$(TF_VAR_name_platform)-menu

- name: TF_WORKSPACE_NAME
  value: $(TF_VAR_name_company)-$(TF_VAR_name_platform)-$(TF_VAR_name_environment)-menu
# Override these on a per-environment basis if neccesary



stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
      - bash: echo '##vso[build.updatebuildnumber]$(Version.Tag)'
        displayName: Update Build Number

      - bash: 'terraform fmt' 
        displayName: terraform fmt
        workingDirectory: '$(Build.SourcesDirectory)/deploy/terraform/azure'

      - publish: $(Build.SourcesDirectory)/deploy/terraform/azure
        artifact: terraform

      - publish: $(Build.SourcesDirectory)/deploy/policies
        artifact: policies

- stage: DevX
  variables: 
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN
  - name: TF_VAR_name_environment
    value: devx

  jobs:
  - deployment: infrastructure # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: devx
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - bash: | 
              wget -O $(Build.BinariesDirectory)/$(Package.File)  'https://amidostackspkgukstmp.blob.core.windows.net/packages/$(Package.File)?$(Package.SAS)'
            displayName: Get DevOps Scripts
            workingDirectory: $(Build.BinariesDirectory)
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
              destinationFolder: $(Build.BinariesDirectory)/DevOps
            displayName: Extract DevOps Scripts


          # Not currently supported, should be ready August 2019
          #- template: ./build/azDevOps/azure/templates/deploy-azure-terraform.yml

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)

          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)


- stage: Test
  variables: 
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN
  - name: TF_VAR_name_environment
    value: test

  jobs:
  - deployment: infrastructure # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - bash: | 
              wget -O $(Build.BinariesDirectory)/$(Package.File)  'https://amidostackspkgukstmp.blob.core.windows.net/packages/$(Package.File)?$(Package.SAS)'
            displayName: Get DevOps Scripts
            workingDirectory: $(Build.BinariesDirectory)
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Build.BinariesDirectory)/$(Package.File)' 
              destinationFolder: $(Build.BinariesDirectory)/DevOps
            displayName: Extract DevOps Scripts


          # Not currently supported, should be ready August 2019
          #- template: ./build/azDevOps/azure/templates/deploy-azure-terraform.yml

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Build.BinariesDirectory)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)

          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)

