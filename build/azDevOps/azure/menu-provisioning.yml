name: $(build.SourceBranchName)-init

trigger:
  paths:
    include:
    - deploy/terraform/*
    - build/azDevOps/azure/menu-provisioning.yml
    exclude:
    - deploy/*
    - src/*
    - contracts/*
    - build/*
pr:
- master

resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    endpoint: williamayerst # Created when you set up the connection to GitHub from Azure DevOps
    

variables:
- name: system.debug
  value: true

# Versioning
- name: Version.Major
  value: 0
- name: Version.Minor
  value: 1
- name: Version.MajorMinor
  value: $(Version.Major).$(Version.Minor)
- name: Version.Revision
  value: $[counter(variables['Version.MajorMinor'], 0)]
- name: Version.Tag
  value: $(Version.MajorMinor).$(Version.Revision)-$(build.sourcebranchname)

# DevOps Scripts Package Info
- name: DevOps.File
  value: scripts-1.2.8-master.tar.gz
- name: DevOps.Container
  value: packages
- name: DevOps.storageAccount
  value: amidostacksuksprod
- name: DevOps.RG
  value: amido-stacks-rg-uks-prod

# Terraform Global Variables:
- name: TF_VAR_name_company
  value: amido
- name: TF_VAR_name_platform
  value: stacks
- name: TF_VAR_name_component
  value: menu
- name: TF_VAR_resource_group_tags
  value: "{}"
- name: TF_VAR_resource_group_location_env
  value: uksouth

# Terraform State Backend:
- name: TF_STATE_RG
  value: amido-stacks-rg-uks
- name: TF_STATE_STORAGEACCOUNT
  value: $(TF_VAR_name_company)$(TF_VAR_name_platform)tfstategbl
- name: TF_STATE_CONTAINERNAME
  value: tfstate
- name: TF_STATE_KEY
  value: $(TF_VAR_name_company)-$(TF_VAR_name_platform)-$(TF_VAR_name_component)
- name: TF_WORKSPACE_NAME
  value: $(TF_VAR_name_company)-$(TF_VAR_name_platform)-$(TF_VAR_name_component)-$(TF_VAR_name_environment)
# Override these on a per-environment basis if neccesary

# CosmosDB Configuration
# INFO: CosmosDB.accountName is auto-generated!
- name: cosmosDB.databaseName
  value: Stacks
- name: cosmosDB.collectionName
  value: Menu
- name: cosmosDB.collectionPartitionKey
  value: id


stages:
- stage: Build
  variables: 
  - group: amido-stacks-infra-credentials-prod # Used to pull artefact from prod store
  jobs:
  - job: Validate
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: False
    steps:
      - bash: echo '##vso[build.updatebuildnumber]$(Version.Tag)'
        displayName: Update Build Number

      - template: azDevOps/azure/templates/steps/build-validate-terraform.yml@templates
        parameters: 
          terraform_artefact_name: terraform
          terraform_filepath: '$(Build.SourcesDirectory)/deploy/terraform/azure'

  # Retrieve a blob file with only Azure credentials, extract it and publish as an artefact
  - template: azDevOps/azure/templates/jobs/publish-blob-as-artefact.yml@templates
    parameters: 
      Package_RG: $(DevOps.RG)
      Package_storageAccount: $(DevOps.storageAccount) 
      Package_Container: $(DevOps.Container)
      Package_File: $(DevOps.File)
      Package_OutputFolder: $(Build.BinariesDirectory)
      Package_OutputArtefact: 'DevOps'
  
- stage: NonProduction
  variables: 
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN

  jobs:
  - deployment: DevX # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: devx
    variables:  
    - name: TF_VAR_name_environment
      value: devx
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # CosmosDB
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: |
              terraform output cosmosdb_rg_name
              cosmosdb_rg_name=$(terraform output cosmosdb_rg_name)
              echo Setting cosmosDB.resourceGroup to $cosmosdb_rg_name
              echo "##vso[task.setvariable variable=cosmosDB.resourceGroup]$cosmosdb_rg_name"

              cosmosdb_database_name=$(terraform output cosmosdb_database_name)              
              echo Setting cosmosDB.databaseName to $cosmosdb_database_name
              echo "##vso[task.setvariable variable=cosmosDB.databaseName]$cosmosdb_database_name"

              cosmosdb_account_name=$(terraform output cosmosdb_account_name)              
              echo Setting cosmosDB.accountName to $cosmosdb_account_name
              echo "##vso[task.setvariable variable=cosmosDB.accountName]$cosmosdb_account_name"
            displayName: Writing TF Outputs to Variables
            workingDirectory: $(Pipeline.Workspace)/terraform            
            name: tfoutputs

          - task: Bash@3
            displayName: New CosmosDB Collection
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/new-cosmosdb-collection.sh
              arguments: $(cosmosDB.resourceGroup) $(cosmosDB.accountName) $(cosmosDB.databaseName) $(cosmosDB.collectionName) $(cosmosDB.collectionPartitionKey)
              failOnStderr: true     
        
  - deployment: TestX # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: testx
    variables:
    - name: TF_VAR_name_environment
      value: testx
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)


          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # CosmosDB
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: |
              terraform output cosmosdb_rg_name
              cosmosdb_rg_name=$(terraform output cosmosdb_rg_name)
              echo Setting cosmosDB.resourceGroup to $cosmosdb_rg_name
              echo "##vso[task.setvariable variable=cosmosDB.resourceGroup]$cosmosdb_rg_name"

              cosmosdb_database_name=$(terraform output cosmosdb_database_name)              
              echo Setting cosmosDB.databaseName to $cosmosdb_database_name
              echo "##vso[task.setvariable variable=cosmosDB.databaseName]$cosmosdb_database_name"

              cosmosdb_account_name=$(terraform output cosmosdb_account_name)              
              echo Setting cosmosDB.accountName to $cosmosdb_account_name
              echo "##vso[task.setvariable variable=cosmosDB.accountName]$cosmosdb_account_name"
            displayName: Writing TF Outputs to Variables
            workingDirectory: $(Pipeline.Workspace)/terraform            
            name: tfoutputs

          - task: Bash@3
            displayName: New CosmosDB Collection
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/new-cosmosdb-collection.sh
              arguments: $(cosmosDB.resourceGroup) $(cosmosDB.accountName) $(cosmosDB.databaseName) $(cosmosDB.collectionName) $(cosmosDB.collectionPartitionKey)
              failOnStderr: true 


- stage: Production
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables: 
  - group: amido-stacks-infra-credentials-prod
  - group: amido-stacks-infra-nonprod # Used for Terraform secrets and Cluster SPN

  jobs:
  - deployment: Performance # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: perf
    variables:  
    - name: TF_VAR_name_environment
      value: perf
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # CosmosDB
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: |
              terraform output cosmosdb_rg_name
              cosmosdb_rg_name=$(terraform output cosmosdb_rg_name)
              echo Setting cosmosDB.resourceGroup to $cosmosdb_rg_name
              echo "##vso[task.setvariable variable=cosmosDB.resourceGroup]$cosmosdb_rg_name"

              cosmosdb_database_name=$(terraform output cosmosdb_database_name)              
              echo Setting cosmosDB.databaseName to $cosmosdb_database_name
              echo "##vso[task.setvariable variable=cosmosDB.databaseName]$cosmosdb_database_name"

              cosmosdb_account_name=$(terraform output cosmosdb_account_name)              
              echo Setting cosmosDB.accountName to $cosmosdb_account_name
              echo "##vso[task.setvariable variable=cosmosDB.accountName]$cosmosdb_account_name"
            displayName: Writing TF Outputs to Variables
            workingDirectory: $(Pipeline.Workspace)/terraform            
            name: tfoutputs

          - task: Bash@3
            displayName: New CosmosDB Collection
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/new-cosmosdb-collection.sh
              arguments: $(cosmosDB.resourceGroup) $(cosmosDB.accountName) $(cosmosDB.databaseName) $(cosmosDB.collectionName) $(cosmosDB.collectionPartitionKey)
              failOnStderr: true  
           
  - deployment: Prod # This should be made into a meta-template when it's available! 
    pool:
      vmImage: 'ubuntu-latest'
    environment: prod
    variables:
    - name: TF_VAR_name_environment
      value: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download Terraform Artefacts
            artifact: terraform

          - download: current
            displayName: Download DevOps Artefacts
            artifact: DevOps

          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/set-azure-context.sh
              arguments: $(azure_tenant_id) $(azure_subscription_id) $(azure_client_id) $(azure_client_secret)
              failOnStderr: true 

          - bash: |
              terraform version
              terraform init \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="storage_account_name=$(TF_STATE_STORAGEACCOUNT)" \
              -backend-config="resource_group_name=$(TF_STATE_RG)" \
              -backend-config="container_name=$(TF_STATE_CONTAINERNAME)" \
              -backend-config="subscription_id=$(azure_subscription_id)" \
              -backend-config="tenant_id=$(azure_tenant_id)" \
              -backend-config="client_id=$(azure_client_id)" \
              -backend-config="client_secret=$(azure_client_secret)"
            displayName: terraform init
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

          - bash: | 
              terraform workspace select $(TF_WORKSPACE_NAME) || terraform workspace new $(TF_WORKSPACE_NAME)
            displayName: Select TF Workspace
            workingDirectory: $(Pipeline.Workspace)/terraform

          - bash: terraform plan -input=false -out=tfplan
            displayName: terraform plan
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)


          - bash: terraform apply tfplan
            displayName: terraform apply
            workingDirectory: $(Pipeline.Workspace)/terraform
            env:
              # Authentication (this comes from the AzureDevOps library as secured variables)
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
              # Terraform 
              TF_VAR_name_company: $(TF_VAR_name_company)
              TF_VAR_name_platform: $(TF_VAR_name_platform)   
              TF_VAR_name_environment: $(TF_VAR_name_environment)
              TF_VAR_name_component: $(TF_VAR_name_component)
              # Resource Group
              TF_VAR_resource_group_location_env: $(TF_VAR_resource_group_location_env) 
              TF_VAR_resource_group_tags: $(TF_VAR_resource_group_tags)
              # CosmosDB
              # INFO: CosmosDB.accountName is auto-generated! 
              TF_VAR_cosmosDBdatabaseName: $(cosmosDB.databaseName)

          - bash: |
              terraform output cosmosdb_rg_name
              cosmosdb_rg_name=$(terraform output cosmosdb_rg_name)
              echo Setting cosmosDB.resourceGroup to $cosmosdb_rg_name
              echo "##vso[task.setvariable variable=cosmosDB.resourceGroup]$cosmosdb_rg_name"

              cosmosdb_database_name=$(terraform output cosmosdb_database_name)              
              echo Setting cosmosDB.databaseName to $cosmosdb_database_name
              echo "##vso[task.setvariable variable=cosmosDB.databaseName]$cosmosdb_database_name"

              cosmosdb_account_name=$(terraform output cosmosdb_account_name)              
              echo Setting cosmosDB.accountName to $cosmosdb_account_name
              echo "##vso[task.setvariable variable=cosmosDB.accountName]$cosmosdb_account_name"
            displayName: Writing TF Outputs to Variables
            workingDirectory: $(Pipeline.Workspace)/terraform            
            name: tfoutputs

          - task: Bash@3
            displayName: New CosmosDB Collection
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/DevOps/Azure/new-cosmosdb-collection.sh
              arguments: $(cosmosDB.resourceGroup) $(cosmosDB.accountName) $(cosmosDB.databaseName) $(cosmosDB.collectionName) $(cosmosDB.collectionPartitionKey)
              failOnStderr: true 
          