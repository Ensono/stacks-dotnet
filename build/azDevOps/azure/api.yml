name: $(build.SourceBranchName)-init

trigger:
  branches:
    include:
    - "*"
  paths:
    include:
    - src/*
    exclude:
    - src/api/xxAMIDOxx.xxSTACKSxx.API.Models/*
    - deploy/terraform/*
    - build/azDevOps/azure/api-provisioning.yml

# Only build PR's into Master (i.e. 'going live')
pr:
- master

resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    ref: feature/cycle2
    endpoint: amidostacks # Created when you set up the connection to GitHub from Azure DevOps

variables:
# Global Config:
- name: Global.Company
  value: 'amido'
- name: Global.Project
  value: 'stacks'
- name: Global.Domain
  value: 'dotnet'
- name: Global.DotNetCoreVersion
  value: '3.1.x'

# Versioning
- name: Version.Major
  value: 1
- name: Version.Minor

  value: 5
- name: Version.Revision
  value: $[counter(variables['Version.Minor'], 0)]

# Tests
# TODO: Calculate and devolve these into build template where feasible as parameters
- name: Test.FunctionalTestProjectFile
  value: 'xxAMIDOxx.xxSTACKSxx.API.FunctionalTests.csproj'
- name: Test.FunctionalTestProjectSourcePath
  value: '$(Pipeline.Workspace)/tests/Functional/xxAMIDOxx.xxSTACKSxx.API.FunctionalTests'
- name: Test.FunctionalTestProjectBuildPath
  value: '$(Build.BinariesDirectory)'
- name: Test.FunctionalTestReportSourcePath
  value: '$(Pipeline.Workspace)/tests/Functional/xxAMIDOxx.xxSTACKSxx.API.FunctionalTests/bin/Debug/netcoreapp2.2/BDDfy.html'
- name: Test.FunctionalTestReportTargetName
  value: '$(Docker.ImageName)/$(Build.BuildNumber)-$(environment).html'
- name: Test.FunctionalTestReportStorageAccountRG
  value: 'amido-stacks-rg-uks-prod'
- name: Test.FunctionalTestReportStorageAccountName
  value: 'amidostacksuksprod'
- name: Test.FunctionalTestReportStorageContainerName
  value: 'testresults '
- name: Test.ProviderContractTestProjectSourcePath
  value: '$(Build.SourcesDirectory)/src/api/xxAMIDOxx.xxSTACKSxx.API.ContractTests'
- name: Test.TestsSourcePath
  value: '$(Build.SourcesDirectory)/src/tests/'
- name: Test.PerformanceTestProjectSourcePath
  value: '$(Pipeline.Workspace)/tests/Performance/xxAMIDOxx.xxSTACKSxx.API.PerformanceTests'
- name: Test.UnitTestProjectPath
  value: '$(Build.SourcesDirectory)/src/api/**/*UnitTests.csproj'
- name: Test.ComponentTestProjectPath
  value: '$(Build.SourcesDirectory)/src/api/**/*ComponentTests.csproj'
- name: Test.IntegrationTestProjectPath
  value: '$(Build.SourcesDirectory)/src/api/**/*IntegrationTests.csproj'
# Performance Test Settings (set outside of code so they can be adjusted as neccesary)
- group: amido-stacks-testing

- name: Sonar.serviceConnection
  value: 'amido-sonarcloud'
- name: Sonar.organization
  value: $(Global.Company)
- name: Sonar.scannerMode
  value: 'MSBuild'
- name: Sonar.projectKey
  value: 'stacks-dotnet'
- name: Sonar.projectName
  value: '$(Docker.ImageName)'
- name: Sonar.projectVersion
  value: '$(Docker.ImageTag)'

# Release Notes
- name: ReleaseNote.TargetName
  value: '$(Docker.ImageName)/$(Build.BuildNumber).json'
- name: ReleaseNote.StorageAccountRG
  value: 'amido-stacks-rg-uks-prod'
- name: ReleaseNote.StorageAccountName
  value: 'amidostacksuksprod'
- name: ReleaseNote.StorageContainerName
  value: 'releasenotes'
- name: ReleaseNote.GitHubProject
  value: 'stacks-dotnet'

# SonarCloud Info
- name: Test.sonarProjectKey
  value: 'stacks-dotnet'

# Pact Broker Info
- name: Test.PactBrokerUrl
  value: 'https://amido-stacks.pact.dius.com.au'
# Specific Pact Contract Test Variables as ENV VAR
- name: BROKER_URL
  value: '$(Test.PactBrokerUrl)'
- name: BUILD_NUMBER
  value: '$(Docker.ImageTag)'
- name: PACT_BEARER_TOKEN
  value: '$(Test.PactBearerToken)'

# Docker Config
- name: Docker.DockerfilePath
  value: 'src/api/'
- name: Docker.ImageName
  value: 'menu-api'
- name: Docker.ImageTag
  value: '$(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)'

# DevOps Scripts Package Info
- name: DevOps.File
  value: 'scripts-1.2.84-master.tar.gz'
- name: DevOps.Container
  value: 'packages'
- name: DevOps.storageAccount
  value: 'amidostacksuksprod'
- name: DevOps.RG
  value: 'amido-stacks-rg-uks-prod'
- name: DevOps.ArtefactName
  value: 'DevOps'

stages:

### BUILD ####

- stage: Build
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: 'amidouksstacksacrdev'
  jobs:
  # Set build number
  - template: azDevOps/azure/templates/jobs/build-updatebuildnumber.yml@templates
    parameters:
      build_number: $(Docker.ImageTag)

  # Retrieve a blob file with only Azure credentials, extract it and publish as an artefact
  - template: azDevOps/azure/templates/jobs/publish-blob-as-artefact.yml@templates
    parameters:
      Package_RG: $(DevOps.RG)
      Package_storageAccount: $(DevOps.storageAccount)
      Package_Container: $(DevOps.Container)
      Package_File: $(DevOps.File)
      Package_OutputFolder: $(Build.BinariesDirectory)
      Package_OutputArtefact: '$(DevOps.ArtefactName)'

  - template: azDevOps/azure/templates/jobs/build-dotnet.yml@templates
    parameters:
      dependsOn: GetPackage # Name of 'publish-blob-as-artefact' step above
      devops_artefact_name: '$(DevOps.ArtefactName)'
      # Docker Config
      docker_workdir: '$(Build.SourcesDirectory)/$(Docker.DockerfilePath)'
      docker_build_args: --build-arg nuget_url=$(STACKS_NUGET) --build-arg nuget_token=$(STACKS_NUGET_TOKEN)
      docker_imagename: '$(Docker.ImageName)'
      docker_imagetag: '$(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)'
      docker_containerregistryname: '$(Docker.ContainerRegistryName)'
      # Vulnerability Scanning
      vulnerability_scan: true # TEMPORARY!
      vulnerability_workdir: '$(Build.ArtifactStagingDirectory)'
      # Static Code Analysis
      static_code_analysis: true # TEMPORARY!
      static_code_analysis_build_path: $(Build.SourcesDirectory)/src/api
      Sonar_serviceConnection: '$(Sonar.serviceConnection)'
      Sonar_organization: '$(Sonar.organization)'
      Sonar_scannerMode: '$(Sonar.scannerMode)'
      Sonar_projectKey: '$(Sonar.projectKey)'
      Sonar_projectName: '$(Sonar.projectName)'
      Sonar_projectVersion: '$(Sonar.projectVersion)'
      # Testing
      # Dotnet Core Version
      dotnet_core_version: '$(Global.DotNetCoreVersion)'
      unit_test: true
      unit_test_project: '$(Test.UnitTestProjectPath)'
      component_test: true
      component_test_project: '$(Test.ComponentTestProjectPath)'
      integration_test: true
      integration_test_project: '$(Test.IntegrationTestProjectPath)'
      integration_test_cosmosdb_secret: true
      integration_test_cosmosdb_account: 'amidostacksmenucdauksdev'
      integration_test_cosmosdb_database: 'Stacks'
      contract_test: true
      contract_test_project: '$(Test.ProviderContractTestProjectSourcePath)/*.csproj'
      functional_test: true
      functional_test_path: '$(Test.TestsSourcePath)'
      functional_test_artefact: 'tests'
      # Build Output File
      build_file: true
      build_file_path: '$(Build.SourcesDirectory)/deploy/k8s/api'
      build_file_artefact: 'build'

### DEPLOYMENT ####

- stage: NonProduction
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - name: Docker.ContainerRegistryName
    value: 'amidouksstacksacrdev'
  - name: Monitoring.applnsightsAccountName
    value: 'amidostacksnetuksdev'
  jobs:
    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        environment: 'dev'
        devops_artefact_name: '$(DevOps.ArtefactName)'
        # Dotnet Core Version
        dotnet_core_version: '$(Global.DotNetCoreVersion)'
        build_file: true
        build_artefact: 'build'
        test_artefact: 'tests'
        test_baseurl: http://dev.amidostacks.com/api/menu/
        functional_test: true
        performance_test: false
        smoke_test: false
        kubernetes_clusterrg: 'amido-stacks-rg-uks-dev'
        kubernetes_clustername: 'amido-stacks-aks-uks-dev'
        kubernetes_kustomize_filepath: 'kustomization/dev'
        kubernetes_docker_registry: $(Docker.ContainerRegistryName).azurecr.io
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksdev
        appinsights_enabled: true
        appinsights_accountName: $(Monitoring.applnsightsAccountName)

    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        dependsOn: 'dev'
        environment: 'test'
        # Artefact and Step Config
        devops_artefact_name: '$(DevOps.ArtefactName)'
        # Dotnet Core Version
        dotnet_core_version: '$(Global.DotNetCoreVersion)'
        build_file: true
        build_artefact: 'build'
        test_artefact: 'tests'
        test_baseurl: http://test.amidostacks.com/api/menu/
        functional_test: true
        performance_test: false
        smoke_test: false
        # Kubernetes Config
        kubernetes_clusterrg: 'amido-stacks-rg-uks-dev'
        kubernetes_clustername: 'amido-stacks-aks-uks-dev'
        # Mutation Information
        kubernetes_kustomize_filepath: 'kustomization/test'
        kubernetes_docker_registry: $(Docker.ContainerRegistryName).azurecr.io
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdaukstest
        appinsights_enabled: true
        appinsights_accountName: $(Monitoring.applnsightsAccountName)

- stage: Promotion
  variables:
  - group: amido-stacks-infra-credentials-prod
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - template: azDevOps/azure/templates/jobs/build-promoteimage.yml@templates
      parameters:
        devops_artefact_name: '$(DevOps.ArtefactName)'
        source_registry: 'amidouksstacksacrdev'
        destination_registry: 'amidouksstacksacrprod'
        docker_imagename: $(Docker.ImageName)
        docker_imagetag: $(Docker.ImageTag)

- stage: Production
  variables:
  - group: amido-stacks-infra-credentials-prod
  - name: Docker.ContainerRegistryName
    value: 'amidouksstacksacrprod'
  - name: Monitoring.applnsightsAccountName
    value: 'amidostacksnetuksprod'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        environment: 'perf'
        devops_artefact_name: '$(DevOps.ArtefactName)'
        # Dotnet Core Version
        dotnet_core_version: '$(Global.DotNetCoreVersion)'
        build_file: true
        build_artefact: 'build'
        test_artefact: 'tests'
        functional_test: false
        performance_test: true
        smoke_test: false
        kubernetes_clusterrg: 'amido-stacks-rg-uks-prod'
        kubernetes_clustername: 'amido-stacks-aks-uks-prod'
        kubernetes_kustomize_filepath: 'kustomization/perf'
        kubernetes_docker_registry: $(Docker.ContainerRegistryName).azurecr.io
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksperf
        appinsights_enabled: true
        appinsights_accountName: $(Monitoring.applnsightsAccountName)

    - template: azDevOps/azure/templates/jobs/deploy-dotnet.yml@templates
      parameters:
        dependsOn: 'perf'
        environment: 'prod'
        # Artefact and Step Config
        devops_artefact_name: '$(DevOps.ArtefactName)'
        # Dotnet Core Version
        dotnet_core_version: '$(Global.DotNetCoreVersion)'
        build_file: true
        build_artefact: 'build'
        test_artefact: 'tests'
        functional_test: false
        performance_test: false
        smoke_test: true
        # Kubernetes Config
        kubernetes_clusterrg: 'amido-stacks-rg-uks-prod'
        kubernetes_clustername: 'amido-stacks-aks-uks-prod'
        # Mutation Information
        kubernetes_kustomize_filepath: 'kustomization/prod'
        kubernetes_docker_registry: $(Docker.ContainerRegistryName).azurecr.io
        cosmosdb_secret: true
        cosmosdb_accountName: amidostacksmenucdauksprod
        appinsights_enabled: true
        appinsights_accountName: $(Monitoring.applnsightsAccountName)

    - template: azDevOps/azure/templates/jobs/deploy-releasenote.yml@templates
      parameters:
        dependsOn: 'prod'
        devops_artefact_name: '$(DevOps.ArtefactName)'
        # Release Creation
        releasenote_version: '$(Docker.ImageTag)'
        releasenote_user: '$(ReleaseNote.GitHubUsername)'
        releasenote_token: '$(ReleaseNote.GitHubToken)'
        releasenote_github_org: '$(Global.Company)'
        releasenote_github_project: '$(ReleaseNote.GitHubProject)' # Repo name doesn't match domain/component unfortunately
        releasenote_output: '$(Build.ArtifactStagingDirectory)/release.json'
        # ReleaseNote Output
        releasenote_storageaccountrg: '$(ReleaseNote.StorageAccountRG)'
        releasenote_storageaccountname: '$(ReleaseNote.StorageAccountName)'
        releasenote_storageaccountcontainer: '$(ReleaseNote.StorageContainerName)'
        releasenote_targetfile: '$(ReleaseNote.TargetName)'
