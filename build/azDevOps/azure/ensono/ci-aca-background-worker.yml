name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - "*"

variables:
  - template: ci-aca-background-worker-vars.yml

  # Common variables
  - template: ../ci-common-vars.yml

stages:
  - stage: Build
    variables:
      - group: azure-sp-creds

    jobs:
      - job: AppBuild
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../../templates/taskctl-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Pull images"
            inputs:
              targetType: inline
              script: |
                taskctl image-pull
                taskctl image-pull-dotnet

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Lint"
            inputs:
              targetType: inline
              script: taskctl lint
            env:
              TF_FILE_LOCATION: "$(TF_FILE_INFRA_LOCATION)"

          - task: Bash@3
            displayName: "TaskCTL: Lint Terraform App Deployment"
            inputs:
              targetType: inline
              script: taskctl lint
            env:
              TF_FILE_LOCATION: "$(TF_FILE_APP_LOCATION)"

          - task: Bash@3
            displayName: "TaskCTL: Test"
            inputs:
              targetType: inline
              script: taskctl test
            env:
              # Dotnet Build
              SELF_REPO_SRC: $(self_repo_src)
              # SonarQube
              SONAR_ORG: $(sonar_organization)
              SONAR_URL: $(sonar_url)
              SONAR_TOKEN: $(SONAR_TOKEN)
              SONAR_PROPERTIES: $(sonar_properties)
              PROJECT_NAME: $(sonar_project_name)
              BUILD_BUILDNUMBER: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Build Functional Tests"
            condition: and(succeeded(), eq(variables.run_functional_tests, true))
            inputs:
              targetType: inline
              script: taskctl build:functional_tests

          - task: Bash@3
            displayName: "TaskCTL: Build Container"
            inputs:
              targetType: inline
              script: taskctl build:container
            env:
              # Dotnet Build
              SELF_REPO_SRC: $(self_repo_src)
              # Azure
              CLOUD_PROVIDER: "$(cloud_provider)" # Azure
              ARM_TENANT_ID: "$(azure-tenant-id)"
              ARM_SUBSCRIPTION_ID: "$(azure-subscription-id)"
              ARM_CLIENT_ID: "$(azure-client-id)"
              ARM_CLIENT_SECRET: "$(azure-client-secret)"
              # Docker
              IMAGE_NAME: $(docker_image_name)
              DOCKER_CONTAINER_REGISTRY_NAME: $(docker_container_registry_name_nonprod).azurecr.io
              REGISTRY_RESOURCE_GROUP: $(docker_container_registry_rg_name_nonprod)
              BUILD_BUILDNUMBER: $(version_number)

          # Upload test coverage results as artifacts
          - task: PublishCodeCoverageResults@1
            displayName: "Upload: coverage results"
            inputs:
              summaryFileLocation: $(Pipeline.Workspace)/s/coverage/Cobertura.xml
              codecoverageTool: cobertura
              pathToSources: $(Pipeline.Workspace)/s/$(self_repo_src)

          # Upload Unit test results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: '**/*.trx'
              searchFolder: $(Pipeline.Workspace)/s/testresults
              failTaskOnFailedTests: true # Optional
              testRunTitle: Unit

          # Upload functional tests as artifacts
          - task: PublishPipelineArtifact@1
            displayName: "Upload: functional tests"
            condition: and(succeeded(), eq(variables.run_functional_tests, true))
            inputs:
              path: $(FUNCTIONAL_TESTS_SRC_DIR)
              artifact: tests

  - stage: Dev
    dependsOn: Build
    condition: and(succeeded(), and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      - group: azure-sp-creds
      - name: Environment.ShortName
        value: dev
      - name: dns_base_domain
        value: nonprod.stacks.ensono.com
      - name: core_environment
        value: core-nonprod
    jobs:
      - deployment: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: taskctl image-pull

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration
                    TF_FILE_LOCATION: "$(TF_FILE_INFRA_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_nonprod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_resource_group: ${{ variables.create_resource_group }}
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_nonprod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_dev }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_dev }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "aca_coreenv"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    TF_VAR_deploy_to_aca: true

      - deployment: DeployDev
        dependsOn: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: |
                      taskctl image-pull
                      taskctl image-pull-dotnet

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    artifact: tests
                    path: $(Agent.BuildDirectory)/s/tests

                - task: Bash@3
                  displayName: "Taskctl: Deployment"
                  inputs:
                    targetType: inline
                    script: taskctl deploy_aca
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration
                    TF_FILE_LOCATION: "$(TF_FILE_APP_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: "$(tf_state_key)-app"
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY)-app,storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_nonprod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_tfstate_key: "aca_coreenv"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_ingress_enabled: $(ingress_enabled)
                    TF_VAR_docker_image_name: $(docker_image_name)
                    TF_VAR_docker_image_tag: $(docker_image_tag)
                    TF_VAR_app_route: "$(app_route)"
                    TF_VAR_log_level: "$(log_level)"
                    TF_VAR_app_environment: $(Environment.ShortName)
                    TF_VAR_tfstate_app_key: "$(tf_state_key)env"
                    TF_VAR_servicebus_type: ${{ variables.servicebus_type }}

                - task: Bash@3
                  displayName: "Taskctl: Functional Tests"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    targetType: inline
                    script: taskctl functional_tests
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_FILE_LOCATION: "$(TF_FILE_INFRA_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: "$(tf_state_key)"
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    FUNCTIONAL_TESTS_RUN_DIR: $(FUNCTIONAL_TESTS_RUN_DIR)
                    BaseUrl: $(FUNCTIONAL_TEST_BASEURL)
                    TEMPLATER_FILE: $(FUNCTIONAL_TESTS_RUN_DIR)/templater.ps1
                    ENV_NAME: $(Environment.ShortName)

                - task: PublishTestResults@2
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    testResultsFormat: VSTest
                    testResultsFiles: '**/*.trx'
                    searchFolder: $(Pipeline.Workspace)/s/testresults
                    failTaskOnFailedTests: true # Optional
                    testRunTitle: Dev Functional Test Report

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      - group: azure-sp-creds
      - name: Environment.ShortName
        value: prod
      - name: dns_base_domain
        value: prod.stacks.ensono.com
      - name: core_environment
        value: core-prod
    jobs:
      - deployment: AppInfraProd
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: taskctl image-pull

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration
                    TF_FILE_LOCATION: "$(TF_FILE_INFRA_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_prod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_resource_group: ${{ variables.create_resource_group }}
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_prod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_prod }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_prod }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "aca_coreenv"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    TF_VAR_deploy_to_aca: true

      - deployment: DeployProd
        dependsOn: AppInfraProd
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: |
                      taskctl image-pull
                      taskctl image-pull-dotnet

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    artifact: tests
                    path: $(Agent.BuildDirectory)/s/tests

                - task: Bash@3
                  displayName: "Taskctl: Deployment"
                  inputs:
                    targetType: inline
                    script: taskctl deploy_aca
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration
                    TF_FILE_LOCATION: "$(TF_FILE_APP_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: "$(tf_state_key)-app"
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY)-app,storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_prod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_tfstate_key: "aca_coreenv"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_ingress_enabled: $(ingress_enabled)
                    TF_VAR_docker_image_name: $(docker_image_name)
                    TF_VAR_docker_image_tag: $(docker_image_tag)
                    TF_VAR_app_route: "$(app_route)"
                    TF_VAR_log_level: "$(log_level)"
                    TF_VAR_app_environment: $(Environment.ShortName)
                    TF_VAR_tfstate_app_key: "$(tf_state_key)env"
                    TF_VAR_servicebus_type: ${{ variables.servicebus_type }}

                - task: Bash@3
                  displayName: "Taskctl: Functional Tests"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    targetType: inline
                    script: taskctl functional_tests
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_FILE_LOCATION: "$(TF_FILE_INFRA_LOCATION)"
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: "$(tf_state_key)"
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    FUNCTIONAL_TESTS_RUN_DIR: $(FUNCTIONAL_TESTS_RUN_DIR)
                    BaseUrl: $(FUNCTIONAL_TEST_BASEURL)
                    TEMPLATER_FILE: $(FUNCTIONAL_TESTS_RUN_DIR)/templater.ps1
                    ENV_NAME: $(Environment.ShortName)

                - task: PublishTestResults@2
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    testResultsFormat: VSTest
                    testResultsFiles: '**/*.trx'
                    searchFolder: $(Pipeline.Workspace)/s/testresults
                    failTaskOnFailedTests: true # Optional
                    testRunTitle: Prod Functional Test Report
