variables:
  - name: region
    value: westeurope
  - name: company
    value: ensono
  - name: project
    value: stacks
  - name: domain
    value: netcore-aeh-listener
  - name: self_repo
    value: stacks-dotnet
  - name: self_generic_name
    value: stacks-aeh-listener

  # Azure DevOps Group containing the SONAR_TOKEN secret
  - group: stacks-dotnet-api

  - name: cloud_provider
    value: "azure"

  # Terraform Configuration

  # State configuration

  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  - name: tf_state_rg
    value: stacks-terraform-state
  - name: tf_state_storage
    value: stacksstatehjfis
  - name: tf_state_container
    value: tfstate
  - name: tf_state_key
    value: $(domain)
  - name: TF_FILE_LOCATION
    value: deploy/azure/app/kube

  # App Specific Taxonomy
  - name: resource_def_name
    value: dotnet-api
  - name: component
    value: aeh-listener
  - name: role
    value: backend
  - name: k8s_app_route
    value: /api/menu
  - name: app_name
    value: yumido-netcore-aeh-listener

  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  - name: self_repo_src
    value: src/func-aeh-listener/src/functions
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"

  # SonarQube Configuration
  # SONAR_TOKEN must be inherited from library groups/etc.
  - name: sonar_organization
    value: ensono
  - name: sonar_url
    value: "https://sonarcloud.io"
  - name: sonar_properties
    value: '/d:sonar.cs.opencover.reportsPaths="/app/coverage/*.opencover.xml" /d:sonar.exclusions="**/*Tests" /d:sonar.coverage.exclusions="**/*Tests"'
  - name: sonar_project_name
    value: stacks-dotnet-cqrs

  # Test Configuration
  - name: run_functional_tests
    value: false
  - name: FUNCTIONAL_TESTS_SRC_DIR
    value: src/func-aeh-listener/src/tests/Functional
  - name: FUNCTIONAL_TESTS_RUN_DIR
    value: /app/tests
  - name: FUNCTIONAL_TEST_BASEURL
    value: https://$(Environment.ShortName)-$(domain).$(dns_base_domain)$(k8s_app_route)/

  # Docker Container registry configuration (used for image tagging and pushing)
  # TODO: Despite being available in the TF State, these are required in other steps
  # TODO: which do not inherit the state variables yet
  # TODO: Promotion is now doing nothing as same registry for both envs, consider removing or creating another registry for Prod
  - name: docker_container_registry_rg_name_nonprod
    value: Stacks-Ancillary-Resources
  - name: docker_container_registry_name_nonprod
    value: ensonoeuw
  - name: docker_container_registry_rg_name_prod
    value: Stacks-Ancillary-Resources
  - name: docker_container_registry_name_prod
    value: ensonoeuw

  # Kubernetes & Docker Image Settings
  - name: docker_image_tag
    value: $(version_number)-$(Build.SourceBranchName)
  - name: docker_image_name
    value: $(self_generic_name)

  # TODO: Despite being available in the TF State, these are required in other steps
  # TODO: which do not inherit the state variables yet
  - name: k8s_cluster_target_nonprod
    value: ed-stacks-nonprod-euw-core
  - name: k8s_cluster_identifier_nonprod
    value: ed-stacks-nonprod-euw-core
  - name: k8s_cluster_target_prod
    value: ed-stacks-prod-euw-core
  - name: k8s_cluster_identifier_prod
    value: ed-stacks-prod-euw-core

  # DNS Configuration
  - name: core_resource_group_nonprod
    value: ed-stacks-nonprod-euw-core
  - name: public_ip_name_nonprod
    value: ed-stacks-nonprod-euw-core
  - name: core_resource_group_prod
    value: ed-stacks-prod-euw-core
  - name: public_ip_name_prod
    value: ed-stacks-prod-euw-core

  # Versioning
  - name: version_major
    value: 7
  - name: version_minor
    value: 0
  - name: version_revision
    value: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  - name: version_number
    value: $(version_major).$(version_minor).$(version_revision)
  - name: enable_release_note_generation
    value: true

  # Function App Configuration
  - name: create_function_app
    value: true
  - name: function_name
    value: $(self_generic_name)
  - name: function_resource_group_dev
    value: ensono-stacks-dev-euw-netcore-aeh-listener
  - name: function_resource_group_prod
    value: ensono-stacks-prod-euw-netcore-aeh-listener

  # CosmosDB Configuration
  - name: create_cosmosdb
    value: false

  # ServiceBus Configuration
  - name: create_servicebus_namespace
    value: false
  - name: create_servicebus_topic
    value: false
  - name: create_servicebus_subscription
    value: false

  # EventHub Configuration
  - name: create_eventhub
    value: false
  - name: eventhub_resource_group_name_dev
    value: ensono-stacks-dev-euw-netcore-api-cqrs
  - name: eventhub_resource_group_name_prod
    value: ensono-stacks-prod-euw-netcore-api-cqrs
  - name: eventhub_namespace_dev
    value: stacks-event-hub-yaiwnb
  - name: eventhub_namespace_prod
    value: stacks-event-hub-tnhmdm
  - name: eventhub_name
    value: stacks-event-hub
  - name: eventhub_sa_name_dev
    value: 1i7qmmsd3vfbsron
  - name: eventhub_sa_name_prod
    value: 5v904903ky6r7vz0
  - name: eventhub_sa_blob_container
    value: stacks-blob-container

  # Azure service connection
  - name: azure_service_connection
    value: "Azure Sub - ensono.stacks"
