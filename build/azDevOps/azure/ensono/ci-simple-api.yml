name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - "*"

variables:
  - template: ci-simple-api-vars.yml

  # Common variables
  - template: ../ci-common-vars.yml

resources:
  repositories:
    - repository: wiki # work around for security issue for pipelines to access the WIKI repo
      type: git
      name: Stacks.wiki
      ref: wikiMaster

stages:
  - stage: Build
    variables:
      - group: azure-sp-creds

    jobs:
      - job: AppBuild
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../../templates/taskctl-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Pull images"
            inputs:
              targetType: inline
              script: |
                taskctl image-pull
                taskctl image-pull-dotnet

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Lint"
            inputs:
              targetType: inline
              script: taskctl lint

          - task: Bash@3
            displayName: "TaskCTL: Test"
            inputs:
              targetType: inline
              script: taskctl test
            env:
              # Dotnet Build
              SELF_REPO_SRC: $(self_repo_src)
              # SonarQube
              SONAR_ORG: $(sonar_organization)
              SONAR_URL: $(sonar_url)
              SONAR_TOKEN: $(SONAR_TOKEN)
              SONAR_PROPERTIES: $(sonar_properties)
              PROJECT_NAME: $(sonar_project_name)
              BUILD_BUILDNUMBER: $(version_number)

          - task: Bash@3
            displayName: 'Contract Tests: Pull Pact CLI Docker image'
            condition: eq(variables.run_contract_tests, true)
            inputs:
              targetType: inline
              script: |
                docker pull pactfoundation/pact-cli:latest

          - task: Bash@3
            displayName: 'Contract Tests: Publish OpenAPI spec to PactFlow'
            condition: eq(variables.run_contract_tests, true)
            inputs:
              targetType: inline
              script: |
                docker run --rm \
                  -w ${PWD} \
                  -v ${PWD}:${PWD} \
                  -e PACT_BROKER_BASE_URL=$(PACT_BROKER_BASE_URL) \
                  -e PACT_BROKER_TOKEN=$(PACT_BROKER_TOKEN) \
                  pactfoundation/pact-cli:latest \
                  pactflow publish-provider-contract \
                  $(OAS_FILE) \
                  --provider $(PACTICIPANT_NAME) \
                  --provider-app-version $(version_number) \
                  --branch $(Build.SourceBranchName) \
                  --verification-results $(OAS_FILE) \
                  --verifier "Verification not necessary when the OpenAPI spec is generated by the API code" \
                  --tag $(version_number) $(Build.SourceBranchName) \
                  --content-type "application/yaml" \
                  --verification-exit-code 0 \
                  --verification-results-content-type "application/yaml" \
                  --verification-results-format "yaml"
            env:
              PACTFLOW_TOKEN: $(PACT_BROKER_TOKEN)

          - task: Bash@3
            displayName: "TaskCTL: Build Functional Tests"
            condition: and(succeeded(), eq(variables.run_functional_tests, true))
            inputs:
              targetType: inline
              script: taskctl build:functional_tests

          - task: Bash@3
            displayName: "TaskCTL: Build Container"
            inputs:
              targetType: inline
              script: taskctl build:container
            env:
              # Dotnet Build
              SELF_REPO_SRC: $(self_repo_src)
              # Azure
              CLOUD_PROVIDER: "$(cloud_provider)" # Azure
              ARM_TENANT_ID: "$(azure-tenant-id)"
              ARM_SUBSCRIPTION_ID: "$(azure-subscription-id)"
              ARM_CLIENT_ID: "$(azure-client-id)"
              ARM_CLIENT_SECRET: "$(azure-client-secret)"
              # Docker
              IMAGE_NAME: $(docker_image_name)
              DOCKER_CONTAINER_REGISTRY_NAME: $(docker_container_registry_name_nonprod).azurecr.io
              REGISTRY_RESOURCE_GROUP: $(docker_container_registry_rg_name_nonprod)
              BUILD_BUILDNUMBER: $(version_number)

          # Upload test coverage results as artifacts
          - task: PublishCodeCoverageResults@1
            displayName: "Upload: coverage results"
            inputs:
              summaryFileLocation: $(Pipeline.Workspace)/s/coverage/Cobertura.xml
              codecoverageTool: cobertura
              pathToSources: $(Pipeline.Workspace)/s/$(self_repo_src)

          # Upload Unit test results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: '**/*.trx'
              searchFolder: $(Pipeline.Workspace)/s/testresults
              failTaskOnFailedTests: true # Optional
              testRunTitle: Unit

          # Upload functional tests as artifacts
          - task: PublishPipelineArtifact@1
            displayName: "Upload: functional tests"
            condition: and(succeeded(), eq(variables.run_functional_tests, true))
            inputs:
              path: $(FUNCTIONAL_TESTS_SRC_DIR)
              artifact: tests

  - stage: Dev
    dependsOn: Build
    condition: and(succeeded(), and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      - group: azure-sp-creds
      - name: Environment.ShortName
        value: dev
      - name: dns_base_domain
        value: nonprod.stacks.ensono.com
      - name: core_environment
        value: core-nonprod
    jobs:
      - job: canideploy_dev
        condition: eq(variables.run_contract_tests, true)
        steps:
          - task: Bash@3
            displayName: 'Pull Pact CLI Docker image'
            inputs:
              targetType: inline
              script: |
                docker pull pactfoundation/pact-cli:latest

          - task: Bash@3
            displayName: 'Contract Tests: can-i-deploy to dev'
            inputs:
              targetType: inline
              script: |
                docker run --rm \
                  -e PACT_BROKER_BASE_URL=$(PACT_BROKER_BASE_URL) \
                  -e PACT_BROKER_TOKEN=$(PACT_BROKER_TOKEN) \
                  pactfoundation/pact-cli:latest \
                  broker can-i-deploy \
                  --pacticipant $(PACTICIPANT_NAME) \
                  --version $(version_number) \
                  --to-environment $(Environment.ShortName)

      - deployment: AppInfraDev
        dependsOn: canideploy_dev
        condition: or(succeeded('canideploy_dev'), eq(dependencies.canideploy_dev.result, 'skipped'))
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-dev

        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: taskctl image-pull

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_nonprod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_resource_group: ${{ variables.create_resource_group }}
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_nonprod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_dev }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_dev }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "$(domain)env"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"

      - deployment: DeployDev
        dependsOn: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"

        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "##vso[task.setvariable variable=core_environment;isOutput=true]$(core_environment)"
                  name: SetEnv

                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: |
                      taskctl image-pull
                      taskctl image-pull-dotnet

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    artifact: tests
                    path: $(Agent.BuildDirectory)/s/tests

                - task: Bash@3
                  displayName: "Taskctl: Deploy"
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration  (used for Terraform Outputs)
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_nonprod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_nonprod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_dev }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_dev }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "$(domain)env"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    # Docker Image Information
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(docker_container_registry_name_nonprod).azurecr.io
                    # Configuration
                    ENV_NAME: $(Environment.ShortName)
                    DOMAIN: ${{ variables.domain }}
                    TEMPLATER_FILE: build/deployment_list.ps1
                    # Invoke-KubeCTL control variables
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    # Check base_ prefixed file at $(k8s_resource_file) to see what should be replaced.
                    # The file deployment_list.ps1 can contain custom mappings, otherwise
                    # all other ${var} syntax entries will be replaced with like named env vars
                    K8S_CLUSTER_TARGET: $(k8s_cluster_target_nonprod)
                    K8S_CLUSTER_IDENTIFIER: $(k8s_cluster_identifier_nonprod)
                    # Helm Config
                    HELM_VALUE_FILE: $(helm_value_file)
                    HELM_CHART_FILE: $(helm_chart_file)
                    INGRESS_ENABLED: $(ingress_enabled)
                    SERVICEBUS_TYPE: ${{ variables.servicebus_type }}

                - task: Bash@3
                  displayName: "Taskctl: Functional Tests"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    targetType: inline
                    script: taskctl functional_tests
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    FUNCTIONAL_TESTS_RUN_DIR: $(FUNCTIONAL_TESTS_RUN_DIR)
                    BaseUrl: $(FUNCTIONAL_TEST_BASEURL)
                    TEMPLATER_FILE: $(FUNCTIONAL_TESTS_RUN_DIR)/templater.ps1

                - task: PublishPipelineArtifact@1
                  displayName: "Upload: Helm Values"
                  inputs:
                    path: $(helm_value_file)
                    artifact: helm_values_dev

                - task: PublishTestResults@2
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    testResultsFormat: VSTest
                    testResultsFiles: '**/*.trx'
                    searchFolder: $(Pipeline.Workspace)/s/testresults
                    failTaskOnFailedTests: true # Optional
                    testRunTitle: Dev Functional Test Report

                - task: Bash@3
                  displayName: 'Contract Tests: Record-deployment to dev'
                  condition: and(succeeded(), eq(variables.run_contract_tests, true))
                  inputs:
                    targetType: inline
                    script: |
                      docker run --rm \
                        -e PACT_BROKER_BASE_URL=$(PACT_BROKER_BASE_URL) \
                        -e PACT_BROKER_TOKEN=$(PACT_BROKER_TOKEN) \
                        pactfoundation/pact-cli:latest \
                        broker record-deployment \
                        --pacticipant $(PACTICIPANT_NAME) \
                        --version $(version_number) \
                        --environment $(Environment.ShortName)

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      - group: azure-sp-creds
      - name: Environment.ShortName
        value: prod
      - name: dns_base_domain
        value: prod.stacks.ensono.com
      - name: core_environment
        value: prod
    jobs:
      - job: canideploy_prod
        condition: eq(variables.run_contract_tests, true)
        steps:
          - task: Bash@3
            displayName: 'Pull Pact CLI Docker image'
            inputs:
              targetType: inline
              script: |
                docker pull pactfoundation/pact-cli:latest

          - task: Bash@3
            displayName: 'Contract Tests: can-i-deploy to prod'
            inputs:
              targetType: inline
              script: |
                docker run --rm \
                  -e PACT_BROKER_BASE_URL=$(PACT_BROKER_BASE_URL) \
                  -e PACT_BROKER_TOKEN=$(PACT_BROKER_TOKEN) \
                  pactfoundation/pact-cli:latest \
                  broker can-i-deploy \
                  --pacticipant $(PACTICIPANT_NAME) \
                  --version $(version_number) \
                  --to-environment $(Environment.ShortName)

      - deployment: AppInfraProd
        dependsOn: canideploy_prod
        condition: or(succeeded('canideploy_prod'), eq(dependencies.canideploy_prod.result, 'skipped'))
        pool:
          vmImage: $(pool_vm_image)

        environment: ${{ variables.domain }}-prod

        strategy:
          runOnce:
            deploy:
              steps:

                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: taskctl image-pull

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: $(Environment.ShortName)
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)" # Azure
                    # Terraform Backend Configuration
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_prod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_prod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_prod }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_prod }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "$(domain)env"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        variables:
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "##vso[task.setvariable variable=core_environment;isOutput=true]$(core_environment)"
                  name: SetEnv

                - template: ../../templates/taskctl-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "TaskCTL: Pull images"
                  inputs:
                    targetType: inline
                    script: |
                      taskctl image-pull
                      taskctl image-pull-dotnet

                - task: DownloadPipelineArtifact@2
                  displayName: "Download: Test Artefacts"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    artifact: tests
                    path: $(Build.Workspace)/tests

                - task: Bash@3
                  displayName: "Taskctl: Deploy"
                  inputs:
                    targetType: inline
                    script: taskctl deploy
                    informationPreference: continue
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)" # Azure
                    ARM_CLIENT_ID: $(azure-client-id)
                    ARM_CLIENT_SECRET: $(azure-client-secret)
                    ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                    ARM_TENANT_ID: $(azure-tenant-id)
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    # Deployment Specific Configuration  (used for Terraform Outputs)
                    TF_VAR_core_environment: $(core_environment)
                    TF_VAR_core_resource_group: $(core_resource_group_prod)
                    TF_VAR_name_component: $(component)
                    TF_VAR_resource_group_location: $(region)
                    TF_VAR_create_cdn_endpoint: false
                    TF_VAR_create_dns_record: $(create_dns_record)
                    TF_VAR_name_company: $(company)
                    TF_VAR_name_project: $(project)
                    TF_VAR_name_domain: $(domain)
                    TF_VAR_create_cosmosdb: $(create_cosmosdb)
                    TF_VAR_create_cache: false
                    TF_VAR_stage: $(Environment.ShortName)
                    TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}"
                    TF_VAR_public_ip_name: $(public_ip_name_prod)
                    TF_VAR_create_sb_namespace: $(create_servicebus_namespace)
                    TF_VAR_create_sb_topic: $(create_servicebus_topic)
                    TF_VAR_create_sb_subscription: $(create_servicebus_subscription)
                    TF_VAR_sb_name: ${{ variables.servicebus_namespace_prod }}
                    TF_VAR_sb_resource_group_name: ${{ variables.servicebus_resource_group_prod }}
                    TF_VAR_sb_subscription_name: ${{ variables.servicebus_subscription_name }}
                    TF_VAR_cosmosdb_sql_container: "Menu"
                    TF_VAR_cosmosdb_sql_container_partition_key: "/id"
                    TF_VAR_cosmosdb_kind: "GlobalDocumentDB"
                    TF_VAR_cosmosdb_offer_type: "Standard"
                    TF_VAR_create_eventhub: $(create_eventhub)
                    TF_VAR_tfstate_key: "$(domain)env"
                    TF_VAR_tfstate_storage_account: "$(TF_STATE_STORAGE)"
                    TF_VAR_tfstate_container_name: "$(TF_STATE_CONTAINER)"
                    TF_VAR_tfstate_resource_group_name: "$(TF_STATE_RG)"
                    # Docker Image Information
                    DOCKER_IMAGE_NAME: $(docker_image_name)
                    DOCKER_IMAGE_TAG: $(docker_image_tag)
                    DOCKER_REGISTRY: $(docker_container_registry_name_nonprod).azurecr.io
                    # Configuration
                    ENV_NAME: $(Environment.ShortName)
                    DOMAIN: ${{ variables.domain }}
                    TEMPLATER_FILE: build/deployment_list.ps1
                    # Invoke-KubeCTL control variables
                    NAMESPACE: $(namespace)
                    RESOURCE_DEF_NAME: $(resource_def_name)
                    DEPLOYMENT_STATUS_TIMEOUT: 120s
                    # Check base_ prefixed file at $(k8s_resource_file) to see what should be replaced.
                    # The file deployment_list.ps1 can contain custom mappings, otherwise
                    # all other ${var} syntax entries will be replaced with like named env vars
                    K8S_CLUSTER_TARGET: $(k8s_cluster_target_prod)
                    K8S_CLUSTER_IDENTIFIER: $(k8s_cluster_identifier_prod)
                    # Helm Config
                    HELM_VALUE_FILEPATH: $(helm_value_file)
                    HELM_CHART_FILEPATH: $(helm_chart_file)
                    INGRESS_ENABLED: $(ingress_enabled)
                    SERVICEBUS_TYPE: ${{ variables.servicebus_type }}

                - task: Bash@3
                  displayName: "Taskctl: Functional Tests"
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    targetType: inline
                    script: taskctl functional_tests
                  env:
                    # Azure Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # Terraform Backend Configuration (used for Terraform Outputs)
                    TF_STATE_CONTAINER: $(tf_state_container)
                    TF_STATE_KEY: $(tf_state_key)
                    TF_STATE_RG: $(tf_state_rg)
                    TF_STATE_STORAGE: $(tf_state_storage)
                    TF_BACKEND_ARGS: "key=$(TF_STATE_KEY),storage_account_name=$(TF_STATE_STORAGE),resource_group_name=$(TF_STATE_RG),container_name=$(TF_STATE_CONTAINER),subscription_id=$(ARM_SUBSCRIPTION_ID),tenant_id=$(ARM_TENANT_ID),client_id=$(ARM_CLIENT_ID),client_secret=$(ARM_CLIENT_SECRET)"
                    FUNCTIONAL_TESTS_RUN_DIR: $(FUNCTIONAL_TESTS_RUN_DIR)
                    BaseUrl: $(FUNCTIONAL_TEST_BASEURL)
                    TEMPLATER_FILE: $(FUNCTIONAL_TESTS_RUN_DIR)/templater.ps1

                - task: PublishPipelineArtifact@1
                  displayName: "Upload: Helm Values"
                  inputs:
                    path: $(helm_value_file)
                    artifact: helm_values_prod

                - task: PublishTestResults@2
                  condition: and(succeeded(), eq(variables.run_functional_tests, true))
                  inputs:
                    testResultsFormat: VSTest
                    testResultsFiles: '**/*.trx'
                    searchFolder: $(Pipeline.Workspace)/s/testresults
                    failTaskOnFailedTests: true # Optional
                    testRunTitle: Prod Functional Test Report

                - task: Bash@3
                  displayName: 'Contract Tests: Record-deployment to prod'
                  condition: and(succeeded(), eq(variables.run_contract_tests, true))
                  inputs:
                    targetType: inline
                    script: |
                      docker run --rm \
                        -e PACT_BROKER_BASE_URL=$(PACT_BROKER_BASE_URL) \
                        -e PACT_BROKER_TOKEN=$(PACT_BROKER_TOKEN) \
                        pactfoundation/pact-cli:latest \
                        broker record-deployment \
                        --pacticipant $(PACTICIPANT_NAME) \
                        --version $(version_number) \
                        --environment $(Environment.ShortName)

  - template: ../release-notes/publish-release-notes.yml
    parameters:
      enable: ${{ variables['enable_release_note_generation'] }}
      runCondition: or(succeeded('Dev'), succeeded('Prod'))
      dependsOnStages:
        - Dev
        - Prod
      environment: $[ coalesce(stageDependencies.Dev.DeployDev.outputs['DeployDev.SetEnv.core_environment'], stageDependencies.Prod.DeployProd.outputs['DeployProd.SetEnv.core_environment']) ]
