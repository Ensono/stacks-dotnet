tasks:
  ######
  # These `image-pull*` tasks are dummy tasks used for pulling
  # images in the Pipeline to help de-clutter the build logs:
  # e.g.:
  # - run: taskctl image-pull

  # - run: taskctl lint
  #   env:
  #     TF_FILE_LOCATION: deploy/aws/app/kube

  # - run: taskctl image-pull-dotnet
  image-pull:
    context: powershell
    command: ""

  image-pull-dotnet:
    context: powershell-dotnet
    command: ""
  ######

  buildnumber:
    context: powershell
    description: Update the build number
    command:
      - Update-BuildNumber

  deps:
    context: powershell
    description: Get the necessary dependencies
    command:
      - Invoke-GitClone -repo ensono/stacks-pipeline-templates -ref refs/tags/v2.0.6 -path support

  lint:yaml:
    context: powershell
    description: Perform YAML linting
    command:
      - Invoke-YamlLint

  lint:terraform:format:
    context: powershell
    description: Perform Terraform format check
    command:
      - Invoke-Terraform -Format -Path $env:TF_FILE_LOCATION

  lint:terraform:validate:
    context: powershell
    description: Perform Terraform validation
    command:
      - ln -sfn /usr/local/terraform/1.9.3/bin /usr/local/terraform/bin;
        Invoke-Terraform -Validate -Path $env:TF_FILE_LOCATION

  # TESTS
  test:
    context: powershell-dotnet
    description: Run Tests
    command:
      - $ErrorActionPreference = "Stop";
        cd $env:SELF_REPO_SRC &&
        Invoke-SonarScanner -start &&
        Invoke-DotNet -Custom -arguments "workload install aspire" &&
        Invoke-DotNet -Build -Path . &&
        Invoke-DotNet -Tests -pattern "*UnitTests" -arguments "--logger 'trx' --results-directory /app/testresults -p:CollectCoverage=true -p:CoverletOutputFormat=opencover -p:CoverletOutput=/app/coverage/" &&
        Invoke-DotNet -Tests -pattern "*ComponentTests" -arguments "--logger 'trx' --results-directory /app/testresults -p:CollectCoverage=true -p:CoverletOutputFormat=opencover -p:CoverletOutput=/app/coverage/" &&
        Invoke-DotNet -Tests -pattern "*ContractTests" -arguments "--logger 'trx' --results-directory /app/testresults -p:CollectCoverage=true -p:CoverletOutputFormat=opencover -p:CoverletOutput=/app/coverage/" &&
        Invoke-DotNet -Coverage -target /app/coverage -path /app/coverage &&
        Remove-Item Env:\SONAR_PROPERTIES &&
        Invoke-SonarScanner -stop
    condition: exit $TEST_NO_RUN

  # TODO: Not currently used
  test:sonarcloud:start:
    context: powershell-dotnet
    description: Start SonarCloud tests
    command:
      - Invoke-SonarScanner -start &&
        Invoke-DotNet -Build
    condition: exit $SONAR_NO_RUN

  # TODO: Not currently used
  test:sonarcloud:stop:
    context: powershell-dotnet
    description: Stop SonarCloud tests
    command:
      - Invoke-SonarScanner -stop
    condition: exit $SONAR_NO_RUN

  # TODO: Not currently used
  test:unittest:
    context: powershell-dotnet
    description: Perform unit tests
    command:
      - Invoke-DotNet -Tests -pattern "*UnitTests"
    condition: exit $UNITTEST_NO_RUN

  # TODO: Not currently used
  test:component:
    context: powershell-dotnet
    description: Perform component tests
    command:
      - Invoke-DotNet -Tests -pattern "*ComponentTests"
    condition: exit $COMPONENTTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  # TODO: Not currently used
  test:integration:
    context: powershell-dotnet
    description: Perform Integration tests
    command:
      - Invoke-DotNet -Tests -pattern "*IntegrationTests"
    condition: exit $INTEGRATIONTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  # TODO: Not currently used
  test:contract:
    context: powershell-dotnet
    description: Perform contract tests
    command:
      - Invoke-DotNet -Tests -pattern "*ContractTests"
    condition: exit $CONTRACTTEST_NO_RUN

  # TODO: Not currently used
  test:coverage:
    context: powershell-dotnet
    description: Generate test coverage reports
    command:
      - Invoke-DotNet -Coverage -target /app/coverage

  # Compilation tasks
  build:container:
    context: powershell
    description: Create container image for application
    command:
      - $ErrorActionPreference = "Stop";
        Build-DockerImage -Provider $env:CLOUD_PROVIDER -Name $env:IMAGE_NAME -region $env:ECR_REGION -BuildPath . -BuildArgs "-f $env:SELF_REPO_SRC/Dockerfile --build-arg self_repo_src=$env:SELF_REPO_SRC" -push

  # SAMPLE build without docker sock
  safe:container:login:
    context: container:auth
    command:
      - |
        aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${DOCKER_CONTAINER_REGISTRY_NAME}
        mkdir .docker
        cp $HOME/.docker/config.json .docker/config.json

  safe:container:build:push:
    context: container:builder
    description: |
      builds multi arch images and pushes them to registry
    command:
      - |
        pwd
        podman build --platform=linux/amd64 -f $SELF_REPO_SRC/Dockerfile -t ${IMAGE_NAME_TAG}-linux-amd64 --build-arg self_repo_src=$SELF_REPO_SRC .
        podman build --platform=linux/arm64 -f $SELF_REPO_SRC/Dockerfile -t ${IMAGE_NAME_TAG}-linux-arm64 --build-arg self_repo_src=$SELF_REPO_SRC .
        podman manifest create ${IMAGE_NAME_TAG} \
          ${IMAGE_NAME_TAG}-linux-amd64 \
          ${IMAGE_NAME_TAG}-linux-arm64
        podman manifest push ${IMAGE_NAME_TAG} docker://${IMAGE_NAME_TAG}
        podman manifest rm ${IMAGE_NAME_TAG}
    reset_context: true
    env:
      SELF_REPO_SRC: src/simple-api/src/api
      # TODO: unfurl ENV variables if found as values to env input property 
      # IMAGE_NAME_TAG: ${IMAGE_NAME}:${BUILD_BUILDNUMBER}


  build:functional_tests:
    context: powershell-dotnet
    description: Build functional tests for integration testing
    command:
      - Invoke-Dotnet -Build -Path $env:FUNCTIONAL_TESTS_SRC_DIR

  # Infrastructure tasks
  infra:init:
    context: powershell
    description: Initialise Terraform for the environment
    command:
      - ln -sfn /usr/local/terraform/1.9.3/bin /usr/local/terraform/bin;
        Invoke-Terraform -Init -backend "$env:TF_BACKEND_ARGS" -Path $env:TF_FILE_LOCATION -Debug;
        Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path $env:TF_FILE_LOCATION -Debug

  infra:plan:
    context: powershell
    description: Plan Terraform
    command:
      - ln -sfn /usr/local/terraform/1.9.3/bin /usr/local/terraform/bin;
        Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-input=false","-out=tfplan" -Debug

  infra:apply:
    context: powershell
    description: Apply Terraform Plan
    command:
      - ln -sfn /usr/local/terraform/1.9.3/bin /usr/local/terraform/bin;
        Push-Location $env:TF_FILE_LOCATION && Invoke-Terraform -Apply -Path tfplan -Debug

  # Deployment Tasks
  deploy:templater:
    context: powershell
    description: Render deployment templates
    command:
      - ln -sfn /usr/local/terraform/1.9.3/bin /usr/local/terraform/bin;
        Invoke-Terraform -Output -Sensitive -Path $env:TF_FILE_LOCATION | Invoke-Templater -Path build/deployment_list.ps1

  deploy:kubernetes:
    context: powershell
    description: Deploy to Kubernetes
    command:
      - Invoke-Kubectl -provider $env:CLOUD_PROVIDER -target $env:K8S_CLUSTER_TARGET -identifier $env:K8S_CLUSTER_IDENTIFIER -Apply -Arguments $env:K8S_RESOURCE_FILE

  deploy:helm:
    context: powershell
    description: Deploy to Kubernetes with Helm
    command:
      - Invoke-Helm -provider $env:CLOUD_PROVIDER -target $env:K8S_CLUSTER_TARGET -identifier $env:K8S_CLUSTER_IDENTIFIER -Install -valuepath $env:HELM_VALUE_FILE -chartpath $env:HELM_CHART_FILE -namespace $env:NAMESPACE -releasename $env:DOCKER_IMAGE_NAME

  deploy:functional_tests:
    context: powershell-dotnet
    description: Run Functional Tests
    command:
      - Invoke-Dotnet -Tests -pattern "*FunctionalTests" -path ${env:FUNCTIONAL_TESTS_RUN_DIR} -arguments "--logger 'trx' --results-directory /app/testresults"

  publish:github:
    context: powershell
    description: Publish Release to GitHub
    command:
      - Publish-GitHubRelease -artifactsList "$env:ARTIFACTS_LIST"
    env:
      generateReleaseNotes: $true
      #  PUBLISH_RELEASE: $true

  update:dashboard:
    context: powershell
    description: Update the Deployment Dashboard
    command:
      - Update-InfluxDashboard

  publish:nuget:
    context: powershell
    description: Publish Packages to NuGet
    command:
      - Write-Warning "Not actually publishing yet..."
      # env:
      #  PUBLISH_RELEASE: $true

  debug:env:
    context: powershell
    description: Debugging task to show the environment variables in the container
    command:
      - dir env:/

  debug:location:
    context: powershell
    command:
      - Write-Host "***** DEBUG *****" && get-childitem -filter "*opencover.xml" -recurse

  debug:sleep:
    context: powershell
    command:
      - echo "Sleeping for {{ .sleep }}"
      - sleep {{ .sleep }}
    variables:
      sleep: 30
