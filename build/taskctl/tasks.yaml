tasks:

  buildnumber:
    context: powershell
    description: Update the build number
    command:
      - Update-BuildNumber

  deps:
    context: powershell
    description: Get the necessary dependencies
    command:
      - Invoke-GitClone -repo amido/stacks-pipeline-templates -ref refs/tags/v2.0.6 -path support

  lint:yaml:
    context: powershell-python
    description: Perform YAML linting
    command:
      - Invoke-YamlLint

  lint:terraform:format:
    context: powershell
    description: Perform Terraform format check
    command:
      - Invoke-Terraform -Format -Path deploy/azure/app/kube

  lint:terraform:validate:
    context: powershell
    description: Perform Terraform validation
    command:
      - Invoke-Terraform -Validate -Path deploy/azure/app/kube

  # TESTS
  # Configure test tasks
  test:sonarcloud:start:
    context: powershell-dotnet
    description: Run SonarCloud tests
    command:
      - mkdir /app/temp
      - Invoke-SonarScanner -start -BuildVersion $env:BUILD_BUILDNUMBER # -Properties "/d:sonar.path.temp=/app/temp"
      - Get-ChildItem /app/temp -force | select Name
      - Invoke-DotNet -Build
    condition: exit $SONAR_NO_RUN

  # Stop the static code analyise
  # TODO - need to work out why the coverage files are being modified in the original build
  test:sonarcloud:stop:
    context: powershell-dotnet
    description: Run SonarCloud tests
    command:
      - Get-ChildItem /app/temp -force | select Name
      - Invoke-SonarScanner -stop # -Properties "/d:sonar.path.temp=/app/temp"
    condition: exit $SONAR_NO_RUN

  test:unittest:
    context: powershell-dotnet
    description: Perform unit tests
    command:
      - Invoke-DotNet -Tests -pattern "*UnitTests"
    condition: exit $UNITTEST_NO_RUN

  test:component:
    context: powershell-dotnet
    description: Perform component tests
    command:
      - Invoke-DotNet -Tests -pattern "*ComponentTests"
    condition: exit $COMPONENTTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  test:integration:
    context: powershell-dotnet
    description: Perform Integration tests
    command:
      - Invoke-DotNet -Tests -pattern "*IntegrationTests"
    condition: exit $INTEGRATIONTEST_NO_RUN

  # TODO: Need to work out how to pass in additional environment variables that may have been set
  # They will not always have the same name so we need to accept a list of them, which may not always
  # be formatted correctly for this conversion to be done
  test:contract:
    context: powershell-dotnet
    description: Perform contract tests
    command:
      - Invoke-DotNet -Tests -pattern "*ContractTests"
    condition: exit $CONTRACTTEST_NO_RUN

  test:coverage:
    context: powershell-dotnet
    description: Generate test coverage reports
    command:
      - Invoke-DotNet -Coverage -target /app/coverage

  # Compilation tasks
  build:container:
    context: powershell-dotnet
    description: Create container image for application
    command:
      - Build-DockerImage -Name {{ .IMAGE_NAME }} -buildargs src/api -push
    variables:
      IMAGE_NAME: stacks-api

  build:functional_tests:
    context: powershell-dotnet
    description: Build functional tests for integration testing
    command:
      - Invoke-Dotnet -Build -Path src/tests/Functional

  # Infrastructure tasks
  # Not using dir here because using this means that the directory is changed **after** the envfile
  # has been created but **before** the container is started so Docker is unable to find the file
  # to pull in as variables
  infra:init:
    context: powershell
    description: Initialise Terraform for the environment
    command:
      - Invoke-Terraform -Init -backend key=$env:TF_STATE_KEY,storage_account_name=$env:TF_STATE_STORAGE,resource_group_name=$env:TF_STATE_RG,container_name=$env:TF_STATE_CONTAINER,subscription_id=$env:ARM_SUBSCRIPTION_ID,tenant_id=$env:ARM_TENANT_ID,client_id=$env:ARM_CLIENT_ID,client_secret=$env:ARM_CLIENT_SECRET -Path deploy/azure/app/kube -Debug
      - Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path deploy/azure/app/kube -Debug

  infra:plan:
    context: powershell
    description: Plan Terraform
    command:
      - Invoke-Terraform -Plan -Path deploy/azure/app/kube -Arguments "-input=false","-out=tfplan"

  infra:apply:
    context: powershell
    description: Apply Terraform Plan
    command:
      - Invoke-Terraform -Apply-Path deploy/azure/app/kube -PlanFile tfplan

  # Deployment
  deploy:templater:
    context: powershell
    description: Render deployment templates
    command:
      - Invoke-Terraform -Output -Sensitive -Path deploy/azure/app/kube | Invoke-Templater -Path build/deployment_list.ps1 -Debug
    env:
      RESOURCE_DEF_NAME: netcore-api

  deploy:kubernetes:
    context: powershell
    description: Deploy to Kubernetes
    command:
      - Invoke-Kubectl -Apply -Arguments $env:KUBECTL_FILE_PATH
      - Invoke-Kubectl -Rollout -Arguments "-n $env:NAMESPACE deploy/$env:RESOURCE_DEF_NAME --timeout $env:DEPLOYMENT_STATUS_TIMEOUT"

  deploy:functional_tests:
    context: powershell-dotnet
    description: Run Functional Tests
    command:
      - Invoke-Dotnet -Tests -pattern "*" -path $env:FUNCTIONAL_TESTS_DIR
